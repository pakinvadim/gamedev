//This file has been generated by AdvancedSkeletonPoser//
//Using AdvancedSkeleton Version: 4.07//

global proc asPoserposers ()
{
if (`window -q -ex asPoserposers`)
	deleteUI asPoserposers;

string $asSelectorScriptLocation=`asSelectorScriptLocation`;
string $asIconLocation=$asSelectorScriptLocation+"posers/";
window -rtf 1 -mb 1 -t posers asPoserposers;
menu -l Edit;
	menuItem -l Refresh -c "asPopulateNameSpaceMenu asPoserposers";
	menuItem -l Filter -c "asFilterNameSpaceMenuUI asPoserposers";
	setParent..;

formLayout asPoserposersFormLayout;
text -m 0 -l "asPoserControlSetsMenuItemControlSet " asPoserposersControlSetsText;
optionMenu -cc "asCharChange asPoserposers" asPoserposersOptionMenu;
scrollLayout asPoserposersScrollLayout;
gridLayout -cw 110 -ch 90 -nc 4 -nr 2 asPoserposersGridLayout;
formLayout -e
	-af asPoserposersOptionMenu "top" 0
	-ac asPoserposersScrollLayout "top" 0 asPoserposersOptionMenu
	-af asPoserposersScrollLayout "bottom" 0
	-af asPoserposersScrollLayout "left" 0
	-af asPoserposersScrollLayout "right" 0
	asPoserposersFormLayout;


string $cmd="asSetAttrs asPoserposers \"Main.v 1;Main.tx 0;Main.ty 0;Main.tz 0;Main.rx 0;Main.ry 0;Main.rz 0;Main.sx 1;Main.sy 1;Main.sz 1;Main.fkVis 1;Main.ikVis 1;Main.fkIkVis 1;Main.fingerVis 1;Main.bendVis 1;Main.arrowVis 1;FKExtraRoot_M.v 1;FKExtraRoot_M.rx 0;FKExtraRoot_M.ry 0;FKExtraRoot_M.rz 0;FKExtraRoot_M.sx 1;FKExtraRoot_M.sy 1;FKExtraRoot_M.sz 1;FKRoot_M.v 1;FKRoot_M.rx 0;FKRoot_M.ry 0;FKRoot_M.rz 0;FKRoot_M.sx 1;FKRoot_M.sy 1;FKRoot_M.sz 1;FKExtraSpine1_M.tx 0;FKExtraSpine1_M.ty 0;FKExtraSpine1_M.tz 0;FKExtraSpine1_M.rx 0;FKExtraSpine1_M.ry 0;FKExtraSpine1_M.rz 0;FKSpine1_M.v 1;FKSpine1_M.tx 0;FKSpine1_M.ty 0;FKSpine1_M.tz 0;FKSpine1_M.rx 0;FKSpine1_M.ry 0;FKSpine1_M.rz 0;FKSpine1_M.sx 1;FKSpine1_M.sy 1;FKSpine1_M.sz 1;FKExtraSpine2_M.tx 0;FKExtraSpine2_M.ty 0;FKExtraSpine2_M.tz 0;FKExtraSpine2_M.rx 0;FKExtraSpine2_M.ry 0;FKExtraSpine2_M.rz 0;FKSpine2_M.v 1;FKSpine2_M.tx 0;FKSpine2_M.ty 0;FKSpine2_M.tz 0;FKSpine2_M.rx 0;FKSpine2_M.ry 0;FKSpine2_M.rz 0;FKSpine2_M.sx 1;FKSpine2_M.sy 1;FKSpine2_M.sz 1;FKExtraSpine3_M.tx 0;FKExtraSpine3_M.ty 0;FKExtraSpine3_M.tz 0;FKExtraSpine3_M.rx 0;FKExtraSpine3_M.ry 0;FKExtraSpine3_M.rz 0;FKSpine3_M.v 1;FKSpine3_M.tx 0;FKSpine3_M.ty 0;FKSpine3_M.tz 0;FKSpine3_M.rx 0;FKSpine3_M.ry 0;FKSpine3_M.rz 0;FKSpine3_M.sx 1;FKSpine3_M.sy 1;FKSpine3_M.sz 1;FKExtraChest_M.tx 0;FKExtraChest_M.ty 0;FKExtraChest_M.tz 0;FKExtraChest_M.rx 0;FKExtraChest_M.ry 0;FKExtraChest_M.rz 0;FKChest_M.v 1;FKChest_M.tx 0;FKChest_M.ty 0;FKChest_M.tz 0;FKChest_M.rx 0;FKChest_M.ry 0;FKChest_M.rz 0;FKChest_M.sx 1;FKChest_M.sy 1;FKChest_M.sz 1;HipSwinger_M.v 1;HipSwinger_M.rx 0;HipSwinger_M.ry -7.062250077e-031;HipSwinger_M.rz 0;FKExtraNeck_M.tx 0;FKExtraNeck_M.ty 0;FKExtraNeck_M.tz 0;FKExtraNeck_M.rx 0;FKExtraNeck_M.ry 0;FKExtraNeck_M.rz 0;FKNeck_M.v 1;FKNeck_M.tx 0;FKNeck_M.ty 0;FKNeck_M.tz 0;FKNeck_M.rx 0;FKNeck_M.ry 0;FKNeck_M.rz 0;FKNeck_M.sx 1;FKNeck_M.sy 1;FKNeck_M.sz 1;FKExtraHead_M.tx 0;FKExtraHead_M.ty 0;FKExtraHead_M.tz 0;FKExtraHead_M.rx 0;FKExtraHead_M.ry 0;FKExtraHead_M.rz 0;FKHead_M.v 1;FKHead_M.tx 0;FKHead_M.ty 0;FKHead_M.tz 0;FKHead_M.rx 0;FKHead_M.ry 0;FKHead_M.rz 0;FKHead_M.sx 1;FKHead_M.sy 1;FKHead_M.sz 1;FKExtraScapula_R.tx 0;FKExtraScapula_R.ty 0;FKExtraScapula_R.tz 0;FKExtraScapula_R.rx 0;FKExtraScapula_R.ry 0;FKExtraScapula_R.rz 0;FKScapula_R.v 1;FKScapula_R.tx -0.00458752032;FKScapula_R.ty 0.0537953834;FKScapula_R.tz -0.2836491002;FKScapula_R.rx 0;FKScapula_R.ry 0;FKScapula_R.rz 0;FKScapula_R.sx 1;FKScapula_R.sy 1;FKScapula_R.sz 1;FKExtraShoulder_R.tx 0;FKExtraShoulder_R.ty 0;FKExtraShoulder_R.tz 0;FKExtraShoulder_R.rx 0;FKExtraShoulder_R.ry 0;FKExtraShoulder_R.rz 0;FKShoulder_R.v 1;FKShoulder_R.tx 0;FKShoulder_R.ty 0;FKShoulder_R.tz 0;FKShoulder_R.rx 0;FKShoulder_R.ry 66.52240107;FKShoulder_R.rz 0;FKShoulder_R.sx 1;FKShoulder_R.sy 1;FKShoulder_R.sz 1;FKExtraElbow_R.tx 0;FKExtraElbow_R.ty 0;FKExtraElbow_R.tz 0;FKExtraElbow_R.rx 0;FKExtraElbow_R.ry 0;FKExtraElbow_R.rz 0;FKElbow_R.v 1;FKElbow_R.tx 0;FKElbow_R.ty 0;FKElbow_R.tz 0;FKElbow_R.rx 4.367573708;FKElbow_R.ry 14.40004438;FKElbow_R.rz 17.07248852;FKElbow_R.sx 1;FKElbow_R.sy 1;FKElbow_R.sz 1;FKExtraWrist_R.tx 0;FKExtraWrist_R.ty 0;FKExtraWrist_R.tz 0;FKExtraWrist_R.rx 0;FKExtraWrist_R.ry 0;FKExtraWrist_R.rz 0;FKWrist_R.v 1;FKWrist_R.tx 0;FKWrist_R.ty 0;FKWrist_R.tz 0;FKWrist_R.rx -46.32156769;FKWrist_R.ry 6.988691175;FKWrist_R.rz 7.375628449;FKWrist_R.sx 1;FKWrist_R.sy 1;FKWrist_R.sz 1;FKExtraScapula_L.tx 0;FKExtraScapula_L.ty 0;FKExtraScapula_L.tz 0;FKExtraScapula_L.rx 0;FKExtraScapula_L.ry 0;FKExtraScapula_L.rz 0;FKScapula_L.v 1;FKScapula_L.tx 0.00458752032;FKScapula_L.ty -0.0537953834;FKScapula_L.tz 0.2836491002;FKScapula_L.rx 0;FKScapula_L.ry 0;FKScapula_L.rz 0;FKScapula_L.sx 1;FKScapula_L.sy 1;FKScapula_L.sz 1;FKExtraShoulder_L.tx 0;FKExtraShoulder_L.ty 0;FKExtraShoulder_L.tz 0;FKExtraShoulder_L.rx 0;FKExtraShoulder_L.ry 0;FKExtraShoulder_L.rz 0;FKShoulder_L.v 1;FKShoulder_L.tx 0;FKShoulder_L.ty 0;FKShoulder_L.tz 0;FKShoulder_L.rx 0;FKShoulder_L.ry 66.52240107;FKShoulder_L.rz 0;FKShoulder_L.sx 1;FKShoulder_L.sy 1;FKShoulder_L.sz 1;FKExtraElbow_L.tx 0;FKExtraElbow_L.ty 0;FKExtraElbow_L.tz 0;FKExtraElbow_L.rx 0;FKExtraElbow_L.ry 0;FKExtraElbow_L.rz 0;FKElbow_L.v 1;FKElbow_L.tx 0;FKElbow_L.ty 0;FKElbow_L.tz 0;FKElbow_L.rx 4.367573708;FKElbow_L.ry 14.40004438;FKElbow_L.rz 17.07248852;FKElbow_L.sx 1;FKElbow_L.sy 1;FKElbow_L.sz 1;FKExtraWrist_L.tx 0;FKExtraWrist_L.ty 0;FKExtraWrist_L.tz 0;FKExtraWrist_L.rx 0;FKExtraWrist_L.ry 0;FKExtraWrist_L.rz 0;FKWrist_L.v 1;FKWrist_L.tx 0;FKWrist_L.ty 0;FKWrist_L.tz 0;FKWrist_L.rx -46.32156769;FKWrist_L.ry 6.988691175;FKWrist_L.rz 7.375628449;FKWrist_L.sx 1;FKWrist_L.sy 1;FKWrist_L.sz 1;FKExtraHip_R.tx 0;FKExtraHip_R.ty 0;FKExtraHip_R.tz 0;FKExtraHip_R.rx 0;FKExtraHip_R.ry 0;FKExtraHip_R.rz 0;FKHip_R.v 1;FKHip_R.tx 0;FKHip_R.ty 0;FKHip_R.tz 0;FKHip_R.rx 0;FKHip_R.ry 0;FKHip_R.rz 0;FKHip_R.sx 1;FKHip_R.sy 1;FKHip_R.sz 1;FKExtraKnee_R.tx 0;FKExtraKnee_R.ty 0;FKExtraKnee_R.tz 0;FKExtraKnee_R.rx 0;FKExtraKnee_R.ry 0;FKExtraKnee_R.rz 0;FKKnee_R.v 1;FKKnee_R.tx 0;FKKnee_R.ty 0;FKKnee_R.tz 0;FKKnee_R.rx 0;FKKnee_R.ry 0;FKKnee_R.rz 0;FKKnee_R.sx 1;FKKnee_R.sy 1;FKKnee_R.sz 1;FKExtraAnkle_R.tx 0;FKExtraAnkle_R.ty 0;FKExtraAnkle_R.tz 0;FKExtraAnkle_R.rx 0;FKExtraAnkle_R.ry 0;FKExtraAnkle_R.rz 0;FKAnkle_R.v 1;FKAnkle_R.tx 0;FKAnkle_R.ty 0;FKAnkle_R.tz 0;FKAnkle_R.rx 0;FKAnkle_R.ry 0;FKAnkle_R.rz 0;FKAnkle_R.sx 1;FKAnkle_R.sy 1;FKAnkle_R.sz 1;FKExtraToes_R.tx 0;FKExtraToes_R.ty 0;FKExtraToes_R.tz 0;FKExtraToes_R.rx 0;FKExtraToes_R.ry 0;FKExtraToes_R.rz 0;FKToes_R.v 1;FKToes_R.tx 0;FKToes_R.ty 0;FKToes_R.tz 0;FKToes_R.rx 0;FKToes_R.ry 0;FKToes_R.rz 0;FKToes_R.sx 1;FKToes_R.sy 1;FKToes_R.sz 1;FKExtraHip_L.tx 0;FKExtraHip_L.ty 0;FKExtraHip_L.tz 0;FKExtraHip_L.rx 0;FKExtraHip_L.ry 0;FKExtraHip_L.rz 0;FKHip_L.v 1;FKHip_L.tx 0;FKHip_L.ty 0;FKHip_L.tz 0;FKHip_L.rx 0;FKHip_L.ry 0;FKHip_L.rz 0;FKHip_L.sx 1;FKHip_L.sy 1;FKHip_L.sz 1;FKExtraKnee_L.tx 0;FKExtraKnee_L.ty 0;FKExtraKnee_L.tz 0;FKExtraKnee_L.rx 0;FKExtraKnee_L.ry 0;FKExtraKnee_L.rz 0;FKKnee_L.v 1;FKKnee_L.tx 0;FKKnee_L.ty 0;FKKnee_L.tz 0;FKKnee_L.rx 0;FKKnee_L.ry 0;FKKnee_L.rz 0;FKKnee_L.sx 1;FKKnee_L.sy 1;FKKnee_L.sz 1;FKExtraAnkle_L.tx 0;FKExtraAnkle_L.ty 0;FKExtraAnkle_L.tz 0;FKExtraAnkle_L.rx 0;FKExtraAnkle_L.ry 0;FKExtraAnkle_L.rz 0;FKAnkle_L.v 1;FKAnkle_L.tx 0;FKAnkle_L.ty 0;FKAnkle_L.tz 0;FKAnkle_L.rx 0;FKAnkle_L.ry 0;FKAnkle_L.rz 0;FKAnkle_L.sx 1;FKAnkle_L.sy 1;FKAnkle_L.sz 1;FKExtraToes_L.tx 0;FKExtraToes_L.ty 0;FKExtraToes_L.tz 0;FKExtraToes_L.rx 0;FKExtraToes_L.ry 0;FKExtraToes_L.rz 0;FKToes_L.v 1;FKToes_L.tx 0;FKToes_L.ty 0;FKToes_L.tz 0;FKToes_L.rx 0;FKToes_L.ry 0;FKToes_L.rz 0;FKToes_L.sx 1;FKToes_L.sy 1;FKToes_L.sz 1;FKExtraIndexFinger1_R.tx 0;FKExtraIndexFinger1_R.ty 0;FKExtraIndexFinger1_R.tz 0;FKExtraIndexFinger1_R.rx 0;FKExtraIndexFinger1_R.ry 0;FKExtraIndexFinger1_R.rz 0;FKIndexFinger1_R.v 1;FKIndexFinger1_R.tx 0;FKIndexFinger1_R.ty 0;FKIndexFinger1_R.tz 0;FKIndexFinger1_R.rx 0;FKIndexFinger1_R.ry 0;FKIndexFinger1_R.rz -10.34848251;FKIndexFinger1_R.sx 1;FKIndexFinger1_R.sy 1;FKIndexFinger1_R.sz 1;FKExtraIndexFinger2_R.tx 0;FKExtraIndexFinger2_R.ty 0;FKExtraIndexFinger2_R.tz 0;FKExtraIndexFinger2_R.rx 0;FKExtraIndexFinger2_R.ry 0;FKExtraIndexFinger2_R.rz 0;FKIndexFinger2_R.v 1;FKIndexFinger2_R.tx 0;FKIndexFinger2_R.ty 0;FKIndexFinger2_R.tz 0;FKIndexFinger2_R.rx 0;FKIndexFinger2_R.ry 15.82735797;FKIndexFinger2_R.rz 0;FKIndexFinger2_R.sx 1;FKIndexFinger2_R.sy 1;FKIndexFinger2_R.sz 1;FKExtraIndexFinger3_R.tx 0;FKExtraIndexFinger3_R.ty 0;FKExtraIndexFinger3_R.tz 0;FKExtraIndexFinger3_R.rx 0;FKExtraIndexFinger3_R.ry 0;FKExtraIndexFinger3_R.rz 0;FKIndexFinger3_R.v 1;FKIndexFinger3_R.tx 0;FKIndexFinger3_R.ty 0;FKIndexFinger3_R.tz 0;FKIndexFinger3_R.rx 0;FKIndexFinger3_R.ry 15.82735797;FKIndexFinger3_R.rz 0;FKIndexFinger3_R.sx 1;FKIndexFinger3_R.sy 1;FKIndexFinger3_R.sz 1;FKExtraMiddleFinger1_R.tx 0;FKExtraMiddleFinger1_R.ty 0;FKExtraMiddleFinger1_R.tz 0;FKExtraMiddleFinger1_R.rx 0;FKExtraMiddleFinger1_R.ry 0;FKExtraMiddleFinger1_R.rz 0;FKMiddleFinger1_R.v 1;FKMiddleFinger1_R.tx 0;FKMiddleFinger1_R.ty 0;FKMiddleFinger1_R.tz 0;FKMiddleFinger1_R.rx 0;FKMiddleFinger1_R.ry 0;FKMiddleFinger1_R.rz 7.642830287;FKMiddleFinger1_R.sx 1;FKMiddleFinger1_R.sy 1;FKMiddleFinger1_R.sz 1;FKExtraMiddleFinger2_R.tx 0;FKExtraMiddleFinger2_R.ty 0;FKExtraMiddleFinger2_R.tz 0;FKExtraMiddleFinger2_R.rx 0;FKExtraMiddleFinger2_R.ry 0;FKExtraMiddleFinger2_R.rz 0;FKMiddleFinger2_R.v 1;FKMiddleFinger2_R.tx 0;FKMiddleFinger2_R.ty 0;FKMiddleFinger2_R.tz 0;FKMiddleFinger2_R.rx 0;FKMiddleFinger2_R.ry 26.94737848;FKMiddleFinger2_R.rz 0;FKMiddleFinger2_R.sx 1;FKMiddleFinger2_R.sy 1;FKMiddleFinger2_R.sz 1;FKExtraMiddleFinger3_R.tx 0;FKExtraMiddleFinger3_R.ty 0;FKExtraMiddleFinger3_R.tz 0;FKExtraMiddleFinger3_R.rx 0;FKExtraMiddleFinger3_R.ry 0;FKExtraMiddleFinger3_R.rz 0;FKMiddleFinger3_R.v 1;FKMiddleFinger3_R.tx 0;FKMiddleFinger3_R.ty 0;FKMiddleFinger3_R.tz 0;FKMiddleFinger3_R.rx 0;FKMiddleFinger3_R.ry 26.94737848;FKMiddleFinger3_R.rz 0;FKMiddleFinger3_R.sx 1;FKMiddleFinger3_R.sy 1;FKMiddleFinger3_R.sz 1;FKExtraRingFinger1_R.tx 0;FKExtraRingFinger1_R.ty 0;FKExtraRingFinger1_R.tz 0;FKExtraRingFinger1_R.rx 0;FKExtraRingFinger1_R.ry 0;FKExtraRingFinger1_R.rz 0;FKRingFinger1_R.v 1;FKRingFinger1_R.tx 0;FKRingFinger1_R.ty 0;FKRingFinger1_R.tz 0;FKRingFinger1_R.rx -8.580608861e-016;FKRingFinger1_R.ry 28.75655122;FKRingFinger1_R.rz 22.07856925;FKRingFinger1_R.sx 1;FKRingFinger1_R.sy 1;FKRingFinger1_R.sz 1;FKExtraRingFinger2_R.tx 0;FKExtraRingFinger2_R.ty 0;FKExtraRingFinger2_R.tz 0;FKExtraRingFinger2_R.rx 0;FKExtraRingFinger2_R.ry 0;FKExtraRingFinger2_R.rz 0;FKRingFinger2_R.v 1;FKRingFinger2_R.tx 0;FKRingFinger2_R.ty 0;FKRingFinger2_R.tz 0;FKRingFinger2_R.rx 0;FKRingFinger2_R.ry 28.75655122;FKRingFinger2_R.rz 0;FKRingFinger2_R.sx 1;FKRingFinger2_R.sy 1;FKRingFinger2_R.sz 1;FKExtraRingFinger3_R.tx 0;FKExtraRingFinger3_R.ty 0;FKExtraRingFinger3_R.tz 0;FKExtraRingFinger3_R.rx 0;FKExtraRingFinger3_R.ry 0;FKExtraRingFinger3_R.rz 0;FKRingFinger3_R.v 1;FKRingFinger3_R.tx 0;FKRingFinger3_R.ty 0;FKRingFinger3_R.tz 0;FKRingFinger3_R.rx 0;FKRingFinger3_R.ry 28.75655122;FKRingFinger3_R.rz 0;FKRingFinger3_R.sx 1;FKRingFinger3_R.sy 1;FKRingFinger3_R.sz 1;FKExtraPinkyFinger1_R.tx 0;FKExtraPinkyFinger1_R.ty 0;FKExtraPinkyFinger1_R.tz 0;FKExtraPinkyFinger1_R.rx 0;FKExtraPinkyFinger1_R.ry 0;FKExtraPinkyFinger1_R.rz 0;FKPinkyFinger1_R.v 1;FKPinkyFinger1_R.tx 0;FKPinkyFinger1_R.ty 0;FKPinkyFinger1_R.tz 0;FKPinkyFinger1_R.rx 3.825778743e-015;FKPinkyFinger1_R.ry 36.61757187;FKPinkyFinger1_R.rz 33.76250812;FKPinkyFinger1_R.sx 1;FKPinkyFinger1_R.sy 1;FKPinkyFinger1_R.sz 1;FKExtraPinkyFinger2_R.tx 0;FKExtraPinkyFinger2_R.ty 0;FKExtraPinkyFinger2_R.tz 0;FKExtraPinkyFinger2_R.rx 0;FKExtraPinkyFinger2_R.ry 0;FKExtraPinkyFinger2_R.rz 0;FKPinkyFinger2_R.v 1;FKPinkyFinger2_R.tx 0;FKPinkyFinger2_R.ty 0;FKPinkyFinger2_R.tz 0;FKPinkyFinger2_R.rx 0;FKPinkyFinger2_R.ry 36.61757187;FKPinkyFinger2_R.rz 0;FKPinkyFinger2_R.sx 1;FKPinkyFinger2_R.sy 1;FKPinkyFinger2_R.sz 1;FKExtraPinkyFinger3_R.tx 0;FKExtraPinkyFinger3_R.ty 0;FKExtraPinkyFinger3_R.tz 0;FKExtraPinkyFinger3_R.rx 0;FKExtraPinkyFinger3_R.ry 0;FKExtraPinkyFinger3_R.rz 0;FKPinkyFinger3_R.v 1;FKPinkyFinger3_R.tx 0;FKPinkyFinger3_R.ty 0;FKPinkyFinger3_R.tz 0;FKPinkyFinger3_R.rx 0;FKPinkyFinger3_R.ry 36.61757187;FKPinkyFinger3_R.rz 0;FKPinkyFinger3_R.sx 1;FKPinkyFinger3_R.sy 1;FKPinkyFinger3_R.sz 1;FKExtraThumbFinger1_R.tx 0;FKExtraThumbFinger1_R.ty 0;FKExtraThumbFinger1_R.tz 0;FKExtraThumbFinger1_R.rx 0;FKExtraThumbFinger1_R.ry 0;FKExtraThumbFinger1_R.rz 0;FKThumbFinger1_R.v 1;FKThumbFinger1_R.tx 0;FKThumbFinger1_R.ty 0;FKThumbFinger1_R.tz 0;FKThumbFinger1_R.rx 0;FKThumbFinger1_R.ry 0;FKThumbFinger1_R.rz 0;FKThumbFinger1_R.sx 1;FKThumbFinger1_R.sy 1;FKThumbFinger1_R.sz 1;FKExtraThumbFinger2_R.tx 0;FKExtraThumbFinger2_R.ty 0;FKExtraThumbFinger2_R.tz 0;FKExtraThumbFinger2_R.rx 0;FKExtraThumbFinger2_R.ry 0;FKExtraThumbFinger2_R.rz 0;FKThumbFinger2_R.v 1;FKThumbFinger2_R.tx 0;FKThumbFinger2_R.ty 0;FKThumbFinger2_R.tz 0;FKThumbFinger2_R.rx -3.660944695;FKThumbFinger2_R.ry 8.551534076;FKThumbFinger2_R.rz -13.00087299;FKThumbFinger2_R.sx 1;FKThumbFinger2_R.sy 1;FKThumbFinger2_R.sz 1;FKExtraThumbFinger3_R.tx 0;FKExtraThumbFinger3_R.ty 0;FKExtraThumbFinger3_R.tz 0;FKExtraThumbFinger3_R.rx 0;FKExtraThumbFinger3_R.ry 0;FKExtraThumbFinger3_R.rz 0;FKThumbFinger3_R.v 1;FKThumbFinger3_R.tx 0;FKThumbFinger3_R.ty 0;FKThumbFinger3_R.tz 0;FKThumbFinger3_R.rx 0;FKThumbFinger3_R.ry 7.479508371;FKThumbFinger3_R.rz 0;FKThumbFinger3_R.sx 1;FKThumbFinger3_R.sy 1;FKThumbFinger3_R.sz 1;FKExtraIndexFinger1_L.tx 0;FKExtraIndexFinger1_L.ty 0;FKExtraIndexFinger1_L.tz 0;FKExtraIndexFinger1_L.rx 0;FKExtraIndexFinger1_L.ry 0;FKExtraIndexFinger1_L.rz 0;FKIndexFinger1_L.v 1;FKIndexFinger1_L.tx 0;FKIndexFinger1_L.ty 0;FKIndexFinger1_L.tz 0;FKIndexFinger1_L.rx 0;FKIndexFinger1_L.ry 0;FKIndexFinger1_L.rz -13.54684255;FKIndexFinger1_L.sx 1;FKIndexFinger1_L.sy 1;FKIndexFinger1_L.sz 1;FKExtraIndexFinger2_L.tx 0;FKExtraIndexFinger2_L.ty 0;FKExtraIndexFinger2_L.tz 0;FKExtraIndexFinger2_L.rx 0;FKExtraIndexFinger2_L.ry 0;FKExtraIndexFinger2_L.rz 0;FKIndexFinger2_L.v 1;FKIndexFinger2_L.tx 0;FKIndexFinger2_L.ty 0;FKIndexFinger2_L.tz 0;FKIndexFinger2_L.rx 0;FKIndexFinger2_L.ry 19.33858912;FKIndexFinger2_L.rz 0;FKIndexFinger2_L.sx 1;FKIndexFinger2_L.sy 1;FKIndexFinger2_L.sz 1;FKExtraIndexFinger3_L.tx 0;FKExtraIndexFinger3_L.ty 0;FKExtraIndexFinger3_L.tz 0;FKExtraIndexFinger3_L.rx 0;FKExtraIndexFinger3_L.ry 0;FKExtraIndexFinger3_L.rz 0;FKIndexFinger3_L.v 1;FKIndexFinger3_L.tx 0;FKIndexFinger3_L.ty 0;FKIndexFinger3_L.tz 0;FKIndexFinger3_L.rx 0;FKIndexFinger3_L.ry 19.33858912;FKIndexFinger3_L.rz 0;FKIndexFinger3_L.sx 1;FKIndexFinger3_L.sy 1;FKIndexFinger3_L.sz 1;FKExtraMiddleFinger1_L.tx 0;FKExtraMiddleFinger1_L.ty 0;FKExtraMiddleFinger1_L.tz 0;FKExtraMiddleFinger1_L.rx 0;FKExtraMiddleFinger1_L.ry 0;FKExtraMiddleFinger1_L.rz 0;FKMiddleFinger1_L.v 1;FKMiddleFinger1_L.tx 0;FKMiddleFinger1_L.ty 0;FKMiddleFinger1_L.tz 0;FKMiddleFinger1_L.rx 0;FKMiddleFinger1_L.ry 0;FKMiddleFinger1_L.rz 1.17496491;FKMiddleFinger1_L.sx 1;FKMiddleFinger1_L.sy 1;FKMiddleFinger1_L.sz 1;FKExtraMiddleFinger2_L.tx 0;FKExtraMiddleFinger2_L.ty 0;FKExtraMiddleFinger2_L.tz 0;FKExtraMiddleFinger2_L.rx 0;FKExtraMiddleFinger2_L.ry 0;FKExtraMiddleFinger2_L.rz 0;FKMiddleFinger2_L.v 1;FKMiddleFinger2_L.tx 0;FKMiddleFinger2_L.ty 0;FKMiddleFinger2_L.tz 0;FKMiddleFinger2_L.rx 0;FKMiddleFinger2_L.ry 33.17683405;FKMiddleFinger2_L.rz 0;FKMiddleFinger2_L.sx 1;FKMiddleFinger2_L.sy 1;FKMiddleFinger2_L.sz 1;FKExtraMiddleFinger3_L.tx 0;FKExtraMiddleFinger3_L.ty 0;FKExtraMiddleFinger3_L.tz 0;FKExtraMiddleFinger3_L.rx 0;FKExtraMiddleFinger3_L.ry 0;FKExtraMiddleFinger3_L.rz 0;FKMiddleFinger3_L.v 1;FKMiddleFinger3_L.tx 0;FKMiddleFinger3_L.ty 0;FKMiddleFinger3_L.tz 0;FKMiddleFinger3_L.rx 0;FKMiddleFinger3_L.ry 33.17683405;FKMiddleFinger3_L.rz 0;FKMiddleFinger3_L.sx 1;FKMiddleFinger3_L.sy 1;FKMiddleFinger3_L.sz 1;FKExtraRingFinger1_L.tx 0;FKExtraRingFinger1_L.ty 0;FKExtraRingFinger1_L.tz 0;FKExtraRingFinger1_L.rx 0;FKExtraRingFinger1_L.ry 0;FKExtraRingFinger1_L.rz 0;FKRingFinger1_L.v 1;FKRingFinger1_L.tx 0;FKRingFinger1_L.ty 0;FKRingFinger1_L.tz 0;FKRingFinger1_L.rx -4.074499317e-016;FKRingFinger1_L.ry 22.7991214;FKRingFinger1_L.rz 12.64368441;FKRingFinger1_L.sx 1;FKRingFinger1_L.sy 1;FKRingFinger1_L.sz 1;FKExtraRingFinger2_L.tx 0;FKExtraRingFinger2_L.ty 0;FKExtraRingFinger2_L.tz 0;FKExtraRingFinger2_L.rx 0;FKExtraRingFinger2_L.ry 0;FKExtraRingFinger2_L.rz 0;FKRingFinger2_L.v 1;FKRingFinger2_L.tx 0;FKRingFinger2_L.ty 0;FKRingFinger2_L.tz 0;FKRingFinger2_L.rx 0;FKRingFinger2_L.ry 22.7991214;FKRingFinger2_L.rz 0;FKRingFinger2_L.sx 1;FKRingFinger2_L.sy 1;FKRingFinger2_L.sz 1;FKExtraRingFinger3_L.tx 0;FKExtraRingFinger3_L.ty 0;FKExtraRingFinger3_L.tz 0;FKExtraRingFinger3_L.rx 0;FKExtraRingFinger3_L.ry 0;FKExtraRingFinger3_L.rz 0;FKRingFinger3_L.v 1;FKRingFinger3_L.tx 0;FKRingFinger3_L.ty 0;FKRingFinger3_L.tz 0;FKRingFinger3_L.rx 0;FKRingFinger3_L.ry 55.97595545;FKRingFinger3_L.rz 0;FKRingFinger3_L.sx 1;FKRingFinger3_L.sy 1;FKRingFinger3_L.sz 1;FKExtraPinkyFinger1_L.tx 0;FKExtraPinkyFinger1_L.ty 0;FKExtraPinkyFinger1_L.tz 0;FKExtraPinkyFinger1_L.rx 0;FKExtraPinkyFinger1_L.ry 0;FKExtraPinkyFinger1_L.rz 0;FKPinkyFinger1_L.v 1;FKPinkyFinger1_L.tx 0;FKPinkyFinger1_L.ty 0;FKPinkyFinger1_L.tz 0;FKPinkyFinger1_L.rx 8.667387084e-016;FKPinkyFinger1_L.ry 21.40888565;FKPinkyFinger1_L.rz 23.45234111;FKPinkyFinger1_L.sx 1;FKPinkyFinger1_L.sy 1;FKPinkyFinger1_L.sz 1;FKExtraPinkyFinger2_L.tx 0;FKExtraPinkyFinger2_L.ty 0;FKExtraPinkyFinger2_L.tz 0;FKExtraPinkyFinger2_L.rx 0;FKExtraPinkyFinger2_L.ry 0;FKExtraPinkyFinger2_L.rz 0;FKPinkyFinger2_L.v 1;FKPinkyFinger2_L.tx 0;FKPinkyFinger2_L.ty 0;FKPinkyFinger2_L.tz 0;FKPinkyFinger2_L.rx 0;FKPinkyFinger2_L.ry 21.40888565;FKPinkyFinger2_L.rz 0;FKPinkyFinger2_L.sx 1;FKPinkyFinger2_L.sy 1;FKPinkyFinger2_L.sz 1;FKExtraPinkyFinger3_L.tx 0;FKExtraPinkyFinger3_L.ty 0;FKExtraPinkyFinger3_L.tz 0;FKExtraPinkyFinger3_L.rx 0;FKExtraPinkyFinger3_L.ry 0;FKExtraPinkyFinger3_L.rz 0;FKPinkyFinger3_L.v 1;FKPinkyFinger3_L.tx 0;FKPinkyFinger3_L.ty 0;FKPinkyFinger3_L.tz 0;FKPinkyFinger3_L.rx 0;FKPinkyFinger3_L.ry 21.40888565;FKPinkyFinger3_L.rz 0;FKPinkyFinger3_L.sx 1;FKPinkyFinger3_L.sy 1;FKPinkyFinger3_L.sz 1;FKExtraThumbFinger1_L.tx 0;FKExtraThumbFinger1_L.ty 0;FKExtraThumbFinger1_L.tz 0;FKExtraThumbFinger1_L.rx 0;FKExtraThumbFinger1_L.ry 0;FKExtraThumbFinger1_L.rz 0;FKThumbFinger1_L.v 1;FKThumbFinger1_L.tx 0;FKThumbFinger1_L.ty 0;FKThumbFinger1_L.tz 0;FKThumbFinger1_L.rx 0;FKThumbFinger1_L.ry 0;FKThumbFinger1_L.rz 0;FKThumbFinger1_L.sx 1;FKThumbFinger1_L.sy 1;FKThumbFinger1_L.sz 1;FKExtraThumbFinger2_L.tx 0;FKExtraThumbFinger2_L.ty 0;FKExtraThumbFinger2_L.tz 0;FKExtraThumbFinger2_L.rx 0;FKExtraThumbFinger2_L.ry 0;FKExtraThumbFinger2_L.rz 0;FKThumbFinger2_L.v 1;FKThumbFinger2_L.tx 0;FKThumbFinger2_L.ty 0;FKThumbFinger2_L.tz 0;FKThumbFinger2_L.rx -7.870469603;FKThumbFinger2_L.ry 15.94021265;FKThumbFinger2_L.rz -10.02065036;FKThumbFinger2_L.sx 1;FKThumbFinger2_L.sy 1;FKThumbFinger2_L.sz 1;FKExtraThumbFinger3_L.tx 0;FKExtraThumbFinger3_L.ty 0;FKExtraThumbFinger3_L.tz 0;FKExtraThumbFinger3_L.rx 0;FKExtraThumbFinger3_L.ry 0;FKExtraThumbFinger3_L.rz 0;FKThumbFinger3_L.v 1;FKThumbFinger3_L.tx 0;FKThumbFinger3_L.ty 0;FKThumbFinger3_L.tz 0;FKThumbFinger3_L.rx 3.52623349;FKThumbFinger3_L.ry 5.308555096;FKThumbFinger3_L.rz -11.93695518;FKThumbFinger3_L.sx 1;FKThumbFinger3_L.sy 1;FKThumbFinger3_L.sz 1;IKExtraSpine1_M.tx 0;IKExtraSpine1_M.ty 0;IKExtraSpine1_M.tz 0;IKExtraSpine1_M.rx 0;IKExtraSpine1_M.ry 0;IKExtraSpine1_M.rz 0;IKSpine1_M.v 1;IKSpine1_M.tx 0;IKSpine1_M.ty 0;IKSpine1_M.tz 0;IKSpine1_M.rx 0;IKSpine1_M.ry 0;IKSpine1_M.rz 0;IKSpine1_M.sx 1;IKSpine1_M.sy 1;IKSpine1_M.sz 1;IKSpine1_M.stiff 3;IKExtraSpine2_M.tx 0;IKExtraSpine2_M.ty 0;IKExtraSpine2_M.tz 0;IKExtraSpine2_M.sx 1;IKExtraSpine2_M.sy 1;IKExtraSpine2_M.sz 1;IKSpine2_M.tx 0;IKSpine2_M.ty 0;IKSpine2_M.tz 0;IKSpine2_M.sx 1;IKSpine2_M.sy 1;IKSpine2_M.sz 1;IKExtraSpine3_M.tx 0;IKExtraSpine3_M.ty 0;IKExtraSpine3_M.tz 0;IKExtraSpine3_M.rx 0;IKExtraSpine3_M.ry 0;IKExtraSpine3_M.rz 0;IKSpine3_M.v 1;IKSpine3_M.tx 0;IKSpine3_M.ty 0;IKSpine3_M.tz 0;IKSpine3_M.rx 0;IKSpine3_M.ry 0;IKSpine3_M.rz 0;IKSpine3_M.sx 1;IKSpine3_M.sy 1;IKSpine3_M.sz 1;IKSpine3_M.stretchy 10;IKSpine3_M.fixedEnd 1;IKSpine3_M.stiff 3;IKSpine3_M.volume 10;IKExtraArm_R.tx 0;IKExtraArm_R.ty 0;IKExtraArm_R.tz 0;IKExtraArm_R.rx 0;IKExtraArm_R.ry 0;IKExtraArm_R.rz 0;IKArm_R.v 1;IKArm_R.tx 0;IKArm_R.ty 0;IKArm_R.tz 0;IKArm_R.rx 0;IKArm_R.ry 0;IKArm_R.rz 0;IKArm_R.sx 1;IKArm_R.sy 1;IKArm_R.sz 1;IKArm_R.follow 0;IKArm_R.stretchy 0;IKArm_R.antiPop 0;IKArm_R.Lenght1 1;IKArm_R.Lenght2 1;IKArm_R.volume 10;PoleExtraArm_R.tx 0;PoleExtraArm_R.ty 0;PoleExtraArm_R.tz 0;PoleExtraArm_R.rx 0;PoleExtraArm_R.ry 0;PoleExtraArm_R.rz 0;PoleArm_R.tx 0;PoleArm_R.ty 0;PoleArm_R.tz 0;PoleArm_R.follow 0;PoleArm_R.lock 0;IKExtraLeg_R.tx 0;IKExtraLeg_R.ty 0;IKExtraLeg_R.tz 0;IKExtraLeg_R.rx 0;IKExtraLeg_R.ry 0;IKExtraLeg_R.rz 0;IKLeg_R.v 1;IKLeg_R.tx 0;IKLeg_R.ty 0;IKLeg_R.tz 0;IKLeg_R.rx 0;IKLeg_R.ry 0;IKLeg_R.rz 0;IKLeg_R.sx 1;IKLeg_R.sy 1;IKLeg_R.sz 1;IKLeg_R.swivel 0;IKLeg_R.toe 0;IKLeg_R.roll 0;IKLeg_R.rollAngle 25;IKLeg_R.stretchy 0;IKLeg_R.antiPop 0;IKLeg_R.Lenght1 1;IKLeg_R.Lenght2 1;IKLeg_R.volume 10;RollExtraHeelLeg_R.tx 0;RollExtraHeelLeg_R.ty 0;RollExtraHeelLeg_R.tz 0;RollExtraHeelLeg_R.rx 0;RollExtraHeelLeg_R.ry 0;RollExtraHeelLeg_R.rz 0;RollHeelLeg_R.v 1;RollHeelLeg_R.tx 0;RollHeelLeg_R.ty 0;RollHeelLeg_R.tz 0;RollHeelLeg_R.rx 0;RollHeelLeg_R.ry 0;RollHeelLeg_R.rz 0;RollHeelLeg_R.sx 1;RollHeelLeg_R.sy 1;RollHeelLeg_R.sz 1;RollExtraToesEnd_R.tx 0;RollExtraToesEnd_R.ty 0;RollExtraToesEnd_R.tz 0;RollExtraToesEnd_R.rx 0;RollExtraToesEnd_R.ry 0;RollExtraToesEnd_R.rz 0;RollToesEnd_R.v 1;RollToesEnd_R.tx 0;RollToesEnd_R.ty 0;RollToesEnd_R.tz 0;RollToesEnd_R.rx 0;RollToesEnd_R.ry 0;RollToesEnd_R.rz 0;RollToesEnd_R.sx 1;RollToesEnd_R.sy 1;RollToesEnd_R.sz 1;RollExtraToes_R.tx 0;RollExtraToes_R.ty 0;RollExtraToes_R.tz 0;RollExtraToes_R.rx 0;RollExtraToes_R.ry 0;RollExtraToes_R.rz 0;RollToes_R.v 1;RollToes_R.tx 0;RollToes_R.ty 0;RollToes_R.tz 0;RollToes_R.rx 0;RollToes_R.ry 0;RollToes_R.rz 0;RollToes_R.sx 1;RollToes_R.sy 1;RollToes_R.sz 1;PoleExtraLeg_R.tx 0;PoleExtraLeg_R.ty 0;PoleExtraLeg_R.tz 0;PoleExtraLeg_R.rx 0;PoleExtraLeg_R.ry 0;PoleExtraLeg_R.rz 0;PoleLeg_R.tx 0;PoleLeg_R.ty 0;PoleLeg_R.tz 0;PoleLeg_R.follow 10;PoleLeg_R.lock 0;IKExtraArm_L.tx 0;IKExtraArm_L.ty 0;IKExtraArm_L.tz 0;IKExtraArm_L.rx 0;IKExtraArm_L.ry 0;IKExtraArm_L.rz 0;IKArm_L.v 1;IKArm_L.tx 0;IKArm_L.ty 0;IKArm_L.tz 0;IKArm_L.rx 0;IKArm_L.ry 0;IKArm_L.rz 0;IKArm_L.sx 1;IKArm_L.sy 1;IKArm_L.sz 1;IKArm_L.follow 0;IKArm_L.stretchy 0;IKArm_L.antiPop 0;IKArm_L.Lenght1 1;IKArm_L.Lenght2 1;IKArm_L.volume 10;PoleExtraArm_L.tx 0;PoleExtraArm_L.ty 0;PoleExtraArm_L.tz 0;PoleExtraArm_L.rx 0;PoleExtraArm_L.ry 0;PoleExtraArm_L.rz 0;PoleArm_L.tx 0;PoleArm_L.ty 0;PoleArm_L.tz 0;PoleArm_L.follow 0;PoleArm_L.lock 0;IKExtraLeg_L.tx 0;IKExtraLeg_L.ty 0;IKExtraLeg_L.tz 0;IKExtraLeg_L.rx 0;IKExtraLeg_L.ry 0;IKExtraLeg_L.rz 0;IKLeg_L.v 1;IKLeg_L.tx 0;IKLeg_L.ty 0;IKLeg_L.tz 0;IKLeg_L.rx 0;IKLeg_L.ry 0;IKLeg_L.rz 0;IKLeg_L.sx 1;IKLeg_L.sy 1;IKLeg_L.sz 1;IKLeg_L.swivel 0;IKLeg_L.toe 0;IKLeg_L.roll 0;IKLeg_L.rollAngle 25;IKLeg_L.stretchy 0;IKLeg_L.antiPop 0;IKLeg_L.Lenght1 1;IKLeg_L.Lenght2 1;IKLeg_L.volume 10;RollExtraHeelLeg_L.tx 0;RollExtraHeelLeg_L.ty 0;RollExtraHeelLeg_L.tz 0;RollExtraHeelLeg_L.rx 0;RollExtraHeelLeg_L.ry 0;RollExtraHeelLeg_L.rz 0;RollHeelLeg_L.v 1;RollHeelLeg_L.tx 0;RollHeelLeg_L.ty 0;RollHeelLeg_L.tz 0;RollHeelLeg_L.rx 0;RollHeelLeg_L.ry 0;RollHeelLeg_L.rz 0;RollHeelLeg_L.sx 1;RollHeelLeg_L.sy 1;RollHeelLeg_L.sz 1;RollExtraToesEnd_L.tx 0;RollExtraToesEnd_L.ty 0;RollExtraToesEnd_L.tz 0;RollExtraToesEnd_L.rx 0;RollExtraToesEnd_L.ry 0;RollExtraToesEnd_L.rz 0;RollToesEnd_L.v 1;RollToesEnd_L.tx 0;RollToesEnd_L.ty 0;RollToesEnd_L.tz 0;RollToesEnd_L.rx 0;RollToesEnd_L.ry 0;RollToesEnd_L.rz 0;RollToesEnd_L.sx 1;RollToesEnd_L.sy 1;RollToesEnd_L.sz 1;RollExtraToes_L.tx 0;RollExtraToes_L.ty 0;RollExtraToes_L.tz 0;RollExtraToes_L.rx 0;RollExtraToes_L.ry 0;RollExtraToes_L.rz 0;RollToes_L.v 1;RollToes_L.tx 0;RollToes_L.ty 0;RollToes_L.tz 0;RollToes_L.rx 0;RollToes_L.ry 0;RollToes_L.rz 0;RollToes_L.sx 1;RollToes_L.sy 1;RollToes_L.sz 1;PoleExtraLeg_L.tx 0;PoleExtraLeg_L.ty 0;PoleExtraLeg_L.tz 0;PoleExtraLeg_L.rx 0;PoleExtraLeg_L.ry 0;PoleExtraLeg_L.rz 0;PoleLeg_L.tx 0;PoleLeg_L.ty 0;PoleLeg_L.tz 0;PoleLeg_L.follow 10;PoleLeg_L.lock 0;FKIKSpine_M.FKIKBlend 0;FKIKSpine_M.FKVis 1;FKIKSpine_M.IKVis 1;FKIKArm_R.FKIKBlend 0;FKIKArm_R.FKVis 1;FKIKArm_R.IKVis 1;FKIKLeg_R.FKIKBlend 10;FKIKLeg_R.FKVis 1;FKIKLeg_R.IKVis 1;FKIKArm_L.FKIKBlend 0;FKIKArm_L.FKVis 1;FKIKArm_L.IKVis 1;FKIKLeg_L.FKIKBlend 10;FKIKLeg_L.FKVis 1;FKIKLeg_L.IKVis 1;RootExtraX_M.tx 0;RootExtraX_M.ty 0;RootExtraX_M.tz 0;RootExtraX_M.rx 0;RootExtraX_M.ry 0;RootExtraX_M.rz 0;RootX_M.v 1;RootX_M.tx 0;RootX_M.ty 0;RootX_M.tz 0;RootX_M.rx 0;RootX_M.ry 0;RootX_M.rz 0;RootX_M.CenterBtwFeet 0;Fingers_R.indexCurl 0;Fingers_R.middleCurl 0;Fingers_R.ringCurl 0;Fingers_R.pinkyCurl 0;Fingers_R.thumbCurl 0;Fingers_R.spread 0;Fingers_L.indexCurl 0;Fingers_L.middleCurl 0;Fingers_L.ringCurl 0;Fingers_L.pinkyCurl 0;Fingers_L.thumbCurl 0;Fingers_L.spread 0;\"";
setParent asPoserposersGridLayout;
columnLayout asPoserposersColumnLayout1;
rowColumnLayout -ann 0 -nc 2 -cw 1 100 -cw 2 15 asPoserposersRowColumnLayout1;
iconTextButton -w 100 -h 75 -i ($asIconLocation+"posers_1.png") -c $cmd asPoserposersIconTextButton1;
floatSlider -ann "" -m 0 -min 0 -max 100 -w 10 -h 75 -hr 0 asPoserposersFloatSlider1;
text -h 15 -al "center" -fn "smallBoldLabelFont" -l "stand" asPoserposersText1;
gridLayout -e -pos asPoserposersColumnLayout1 1 asPoserposersGridLayout;
asPoserupdateGridBlock asPoserposers 1;


asPopulateNameSpaceMenu asPoserposers;
asCharChange asPoserposers;
evalDeferred "showWindow;";
}
asPoserposers;

//-- ASTools Procedures Starts Here --//
global proc asSelChange ()
{
global int $asfileLoading;
global int $asSelChangeSwitching;
if ($asfileLoading)
	return;
if (!`optionVar -q asShowSelection` && !`optionVar -q asShowKeyed`)
	return;
string $sel[]=`ls -sl`;
string $name,$obj,$nodeType,$projectName,$ann;
string $ctls[],$buffer[],$connections[];
int $numLetters,$numTok,$keyed;
string $ext=".xpm";
if (`asMayaVersionAsFloat`>=2011)
	$ext=".png";
if (`about -mac`)
	$ext=".iff";
if (`about -linux`)
	$ext=".xpm";
string $currImage,$buttonImageFile,$buttonImageFileOnK0,$buttonImageFileOnK1,$buttonImageFileOffK0,$buttonImageFileOffK1;
string $windows[]=`lsUI -windows`;
string $layout;
for ($window in $windows)
	{
	$layout="";
	if (size($window)>11)
		$layout="asSelector"+`substring $window 11 999`+"FormLayout";
	if (!`formLayout -q -ex $layout`)
		continue;
	$numLetters=size($layout);
	$name=`substring $layout 11 ($numLetters-10)`;
	$ctls=`formLayout -q -ca $layout`;
	for ($ctl in $ctls)
		if (`gmatch $ctl "asSelector*:*"`)
			{
			if (`optionVar -q asShowSelection` && !$asSelChangeSwitching)
				$selState="On";
			else
				$selState="Off";
			$keyed=0;
			$ann=`iconTextButton -q -ann $ctl`;
			$numTok=`tokenize $ann ";" $buffer`;
			for ($i=0;$i<$numTok;$i++)
				{
				$obj=`asSelectorResolveNameSpace $name $buffer[$i]`;
				if (!`stringArrayCount $obj $sel`)
					$selState="Off";
				if (`optionVar -q asShowKeyed` && !$asSelChangeSwitching && `objExists $obj`)
					{
					$connections=`listConnections -s 1 -d 0 $obj`;
					for ($node in $connections)
						{
						$nodeType=`objectType $node`;
						if (`gmatch $nodeType "animCurve*"`)
							$keyed=1;
						}
					}
				}
	
			$currImage=`iconTextButton -q -i1 $ctl`;
			if ($currImage=="")
				return;
			$numTok=`tokenize $currImage "_" $buffer`;
			$projectName=$buffer[0];
			for ($b=1;$b<size($buffer)-3;$b++)
				$projectName+="_"+$buffer[$b];
			$buttonImageFile=$projectName+"_"+$buffer[$numTok-3]+"_"+$buffer[$numTok-2]+"_"+$selState+"K"+$keyed+$ext;

			if ($buttonImageFile!=$currImage)
				iconTextButton -e -i $buttonImageFile $ctl;		
			}
	}
}

global proc float asMayaVersionAsFloat ()
{
float $version=2012;
if (`exists getApplicationVersionAsFloat`)
	return `getApplicationVersionAsFloat`;
string $versionString=`about -v`;
string $tempString[];
string $char;
tokenize $versionString $tempString;
//default to 2012, if versionString is not all numbers
for ($i=0;$i<size($tempString[0]);$i++)
	{
	$char=`substring $tempString[0] ($i+1) ($i+1)`;
	if (!`gmatch $char "[0-9]"`)
		return 2012;
	}
$version=$tempString[0];
return $version;
}

global proc asSelChangeToggle ()
{
global int $asSelChangeSwitching;
$asSelChangeSwitching=1;
string $sel[]=`ls -sl`;
select -cl;
asSelChange;
$asSelChangeSwitching=0;
select $sel;
}

global proc asCharChange (string $uiName)
{
string $gridOrder[];
if (`gridLayout -q -ex ($uiName+"GridLayout")`)
	{
	$gridOrder=`gridLayout -q -go ($uiName+"GridLayout")`;
	for ($i=1;$i<size($gridOrder)+1;$i++)
		if (`floatSlider -q -ex ($uiName+"FloatSlider"+$i)`)
			{
			$ann=`floatSlider -q -ann ($uiName+"FloatSlider"+$i)`;
			$resolvedName=`asPoserResolveNameSpace $uiName $ann`;
			if (`objExists $resolvedName`)
				connectControl ($uiName+"FloatSlider"+$i) $resolvedName;
			}
	}
asSelChange;
}

global proc asShowSelJob ()
{
global int $asSelChangeScripJobNr;
if ($asSelChangeScripJobNr)
	return;
$asSelChangeScripJobNr=`scriptJob -e "SelectionChanged" "asSelChange"`;
}

global proc string asSelectorResolveNameSpace (string $name, string $obj)
{
string $nameSpace=`optionMenu -q -v ("asSelector"+$name+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
return ($nameSpace+$obj);
}

global proc asSelect (string $name, string $objs[])
{
for ($i=0;$i<size($objs);$i++)
	$objs[$i]=`asSelectorResolveNameSpace $name $objs[$i]`;

string $tgl="-r";
int $modifier=`getModifiers`;
if (($modifier %  2)==0)
	select -cl;
if ($objs[0]=="")
	{
	select -cl;
	return;
	}
for ($obj in $objs)
	if (!`objExists $obj`)
		error ("Object:\""+$obj+"\" does not exists !");
for ($obj in $objs)
	select -tgl $obj;		
}

global proc asKey (string $name, string $objs[])
{
for ($i=0;$i<size($objs);$i++)
	$objs[$i]=`asSelectorResolveNameSpace $name $objs[$i]`;

for ($obj in $objs)
	setKeyframe $obj;
select `ls -sl`;
asSelChange;
}

global proc asLinearKey (string $name, string $objs[])
{
for ($i=0;$i<size($objs);$i++)
	$objs[$i]=`asSelectorResolveNameSpace $name $objs[$i]`;

for ($obj in $objs)
	setKeyframe -itt linear -ott linear $obj;
select `ls -sl`;
asSelChange;
}

global proc asAlignIK2FK (string $name, string $objs[])
{
asAssembleAlignSwitchCmd $name $objs "asAlignFKIK" "IK2FK";
}

global proc asAlignFK2IK (string $name, string $objs[])
{
asAssembleAlignSwitchCmd $name $objs "asAlignFKIK" "FK2IK";
}

global proc asSwitchIK2FK (string $name, string $objs[])
{
asAssembleAlignSwitchCmd $name $objs "asSwitchFKIK" "IK2FK";
}

global proc asSwitchFK2IK (string $name, string $objs[])
{
asAssembleAlignSwitchCmd $name $objs "asSwitchFKIK" "FK2IK";
}

global proc asAssembleAlignSwitchCmd (string $name, string $objs[], string $alignSwitchCmd, string $W2K)
{
int $numLetters=size($objs[0]);
string $IK=`substring $objs[0] 5 ($numLetters-2)`;
string $side=`substring $objs[0] ($numLetters-1) $numLetters`;
eval ($alignSwitchCmd+" "+$name+" "+$IK+" "+$side+" "+$W2K);
}

global proc asAlignFKIK (string $name, string $IK, string $side, string $W2K)
{
string $sel[]=`ls -sl`;
string $nameSpace=`asSelectorResolveNameSpace $name ""`;
string $controlCurve=$nameSpace+"FKIK"+$IK+$side;
if (!`objExists $controlCurve`)
	error ("Object:\""+$controlCurve+"\" does not exists !");
string $startJoint=`getAttr ($controlCurve+".startJoint")`;
string $middleJoint=`getAttr ($controlCurve+".middleJoint")`;
string $endJoint=`getAttr ($controlCurve+".endJoint")`;
string $tempLoc1[],$tempLoc2[],$tempConstraint[];
string $requiredObj[]={($nameSpace+"Main"),($nameSpace+"FKX"+$endJoint+$side),($nameSpace+"FKX"+$startJoint+$side),($nameSpace+"FKX"+$endJoint+$side),
	($nameSpace+"Pole"+$IK+$side),($nameSpace+"IKX"+$startJoint+$side),($nameSpace+"IKX"+$middleJoint+$side)};
for ($obj in $requiredObj)
	if (!`objExists $obj`)
		error ("Object:\""+$obj+"\" does not exists !");
float $charsize=`getAttr ($nameSpace+"Main.height")`;
float $tempFloat[],$alignIkToFloat[];
int $autoKey=`autoKeyframe -q -st`;
if ($autoKey)
	autoKeyframe -st 0;

if ($W2K=="FK2IK")
	{
	$tempFloat=`xform -q -ws -t ($nameSpace+"FK"+$endJoint+$side)`;
	xform -ws -t $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"IK"+$IK+$side);
	$tempLoc1=`spaceLocator`;
	$tempConstraint=`pointConstraint ($nameSpace+"FKX"+$startJoint+$side) ($nameSpace+"FKX"+$endJoint+$side) $tempLoc1[0]`;
	delete $tempConstraint[0];
	$tempConstraint=`aimConstraint -aimVector 1 0 0 ($nameSpace+"FKX"+$middleJoint+$side) $tempLoc1[0]`;
	$tempLoc2=`spaceLocator`;
	parent $tempLoc2[0] $tempLoc1[0];
	setAttr -type float3 ($tempLoc2[0]+".translate") ($charsize/3.333) 0 0;
	$tempFloat=`xform -q -ws -t $tempLoc2[0]`;
	xform -ws -t $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"Pole"+$IK+$side);
	delete $tempLoc1;
	$tempFloat=`xform -q -ws -ro ($nameSpace+"AlignIKTo"+$endJoint+$side)`;
	xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"IK"+$IK+$side);
	if (`objExists ($nameSpace+"IKXMiddleToe1"+$side)`)
		if (`attributeExists "roll" ($nameSpace+"IK"+$IK+$side)`)
			setAttr ($nameSpace+"IK"+$IK+$side+".roll") 0;
	}
else
	{
	$tempFloat=`xform -q -ws -ro ($nameSpace+"IKX"+$startJoint+$side)`;
	xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"FK"+$startJoint+$side);
	$tempFloat=`xform -q -ws -ro ($nameSpace+"IKX"+$middleJoint+$side)`;
	xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"FK"+$middleJoint+$side);
	$tempFloat=`xform -q -ws -ro ($nameSpace+"IKX"+$endJoint+$side)`;
	xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"FK"+$endJoint+$side);
	if (`objExists ($nameSpace+"IKXMiddleToe1"+$side)`)
		{
		$tempFloat=`xform -q -ws -ro ($nameSpace+"IKXMiddleToe1"+$side)`;
		xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"FKMiddleToe1"+$side);
		}
	}

if ($autoKey)
	autoKeyframe -st 1;
select $sel;
}

global proc asSwitchFKIK (string $name, string $IK, string $side, string $W2K)
{
string $sel[]=`ls -sl`;
string $nameSpace=`asSelectorResolveNameSpace $name ""`;
string $controlCurve=$nameSpace+"FKIK"+$IK+$side;
string $poleCurve=$nameSpace+"Pole"+$IK+$side;
if (!`objExists $controlCurve`)
	error ("Object:\""+$controlCurve+"\" does not exists !");
string $startJoint=`getAttr ($controlCurve+".startJoint")`;
string $middleJoint=`getAttr ($controlCurve+".middleJoint")`;
string $endJoint=`getAttr ($controlCurve+".endJoint")`;
string $requiredObj[]={($nameSpace+"Main"),($nameSpace+"FKX"+$endJoint+$side),($nameSpace+"FKX"+$startJoint+$side),($nameSpace+"FKX"+$endJoint+$side),
	($nameSpace+"Pole"+$IK+$side),($nameSpace+"IKX"+$startJoint+$side),($nameSpace+"IKX"+$middleJoint+$side)};
for ($obj in $requiredObj)
	if (!`objExists $obj`)
		error ("Object:\""+$obj+"\" does not exists !");
int $Blend;
int $BlendInverse=10;
int $onOff;
if ($W2K=="FK2IK")
	{
	$Blend=10;
	$BlendInverse=0;
	$onOff=1;
	}

if ($W2K=="FK2IK" && `getAttr ($controlCurve+".FKIKBlend")`>0)
	{
	warning ("Could not switch FK2IK, because \"FKIKBlend\" is not \"0\"\n");
	return;
	}
if ($W2K=="IK2FK" && `getAttr ($controlCurve+".FKIKBlend")`<10)
	{
	warning ("Could not switch IK2FK, because \"FKIKBlend\" is not \"10\"\n");
	return;
	}

int $autoKey=`autoKeyframe -q -st`;
if ($autoKey)
	autoKeyframe -st 0;

currentTime (`currentTime -q` -1);
setAttr ($controlCurve+".FKIKBlend") $BlendInverse;
setKeyframe ($controlCurve+".FKIKBlend");
setKeyframe ($poleCurve+".follow");	

setKeyframe ($nameSpace+"FK"+$startJoint+$side+".rotate");
setKeyframe ($nameSpace+"FK"+$middleJoint+$side+".rotate");
setKeyframe ($nameSpace+"FK"+$endJoint+$side+".rotate");
setKeyframe ($nameSpace+"IK"+$IK+$side+".translate");
setKeyframe ($nameSpace+"IK"+$IK+$side+".rotate");
setKeyframe ($nameSpace+"Pole"+$IK+$side+".translate");

if (`objExists ($nameSpace+"IKXMiddleToe1"+$side)`)
	{
	setKeyframe ($nameSpace+"FKMiddleToe1"+$side+".rotate");
	if (`attributeExists "roll" ($nameSpace+"IK"+$IK+$side)`)
		setKeyframe ($nameSpace+"IK"+$IK+$side+".roll");
	}

currentTime (`currentTime -q` +1);


asAlignFKIK $name $IK $side $W2K;


setAttr ($controlCurve+".FKIKBlend") $Blend;
setAttr ($poleCurve+".follow") 0;

setKeyframe ($controlCurve+".FKIKBlend");
setKeyframe ($poleCurve+".follow");

setKeyframe ($nameSpace+"FK"+$startJoint+$side+".rotate");
setKeyframe ($nameSpace+"FK"+$middleJoint+$side+".rotate");
setKeyframe ($nameSpace+"FK"+$endJoint+$side+".rotate");
setKeyframe ($nameSpace+"IK"+$IK+$side+".translate");
setKeyframe ($nameSpace+"IK"+$IK+$side+".rotate");
setKeyframe ($nameSpace+"Pole"+$IK+$side+".translate");
if (`objExists ($nameSpace+"IKXMiddleToe1"+$side)`)
	{
	setKeyframe ($nameSpace+"FKMiddleToe1"+$side+".rotate");
	if (`attributeExists "roll" ($nameSpace+"IK"+$IK+$side)`)
		setKeyframe ($nameSpace+"IK"+$IK+$side+".roll");
	}

if ($autoKey)
	autoKeyframe -st 1;
select $sel;
}

global proc asPopulateNameSpaceMenu (string $name)
{
string $optionMenu=$name+"OptionMenu";
string $nameSpacesList[]=`namespaceInfo -lon`;
$nameSpacesList=`stringArrayRemove {"UI"} $nameSpacesList`;
$nameSpacesList[size($nameSpacesList)]="";
string $itemList[]=`optionMenu -q -ils $optionMenu`;
$nameSpacesList=`sort $nameSpacesList`;
for ($item in $itemList)
	deleteUI $item;

for ($nameSpace in $nameSpacesList)
	if (`objExists ($nameSpace+":Main")`)
		if (`attributeExists "version" ($nameSpace+":Main")`)
			if (`asFilterCheck $name $nameSpace`)
				menuItem -p $optionMenu -l ($nameSpace+":");

if (!`optionMenu -q -ni ($name+"OptionMenu")`)
	{
	if ($name=="bodySetup" || `gmatch $name "asPoser*"`)
		menuItem -p $optionMenu -l "None";
	else
		menuItem -p $optionMenu -l ":";
	}
}

global proc int asFilterCheck (string $name, string $nameSpace)
{
int $result=0;
string $filterString=`optionVar -q ("asSelectorFilter_"+$name)`;
if ($filterString=="" || $filterString=="0")
	return 1;
string $references[]=`file -q -r`;
for ($i=0;$i<size($references);$i++)
	{
	$refNameSpace=`file -q -ns $references[$i]`;
	if ($refNameSpace==$nameSpace)
		if (`gmatch $references[$i] $filterString`)
			$result=1;
	}
return $result;
}

global proc asFilterNameSpaceMenuUI (string $name)
{
string $filterString=`optionVar -q ("asSelectorFilter_"+$name)`;
if ($filterString=="0")
	$filterString="";
if (`window -q -ex ("SelectorFilter_"+$name)`)
	deleteUI ("SelectorFilter_"+$name);
window ("SelectorFilter_"+$name);
columnLayout;
textFieldGrp -tx $filterString -cc ("asSetFilterNameSpaceMenu "+$name) -l "Reference File Filter. (e.g. *characters*)" -cw 1 200 ("asSelectorFilterTextFieldGrp_"+$name);
showWindow;
}

global proc asSetFilterNameSpaceMenu (string $name)
{
string $filterString=`textFieldGrp -q -tx ("asSelectorFilterTextFieldGrp_"+$name)`;
optionVar -sv ("asSelectorFilter_"+$name) $filterString;
asPopulateNameSpaceMenu $name;
}

global proc asSetNameSpaceFromSelection (string $uiName)
{
asPopulateNameSpaceMenu $uiName;
string $sel[]=`ls -sl`;
string $tempString[],$ils[];
if (size($sel))
	{
	tokenize $sel[0] ":" $tempString;
	$ils=`optionMenu -q -ils ($uiName+"OptionMenu")`;
	for ($i=0;$i<size($ils);$i++)
		if (`menuItem -q -l $ils[$i]`==($tempString[0]+":"))
			{
			optionMenu -e -sl ($i+1) ($uiName+"OptionMenu");
			asSelChange;
			}
	}
print "Setting nameSpace from selected object\n";
}

global proc asCopyToClipBoard (string $uiName, int $anim)
{
string $cmd=`asPoserGetCmd $uiName $anim`;
if (!$anim)
	menuItem -e -en 1 -c $cmd ($uiName+"PosePaste");
else
	menuItem -e -en 1 -c ($cmd+" 0") ($uiName+"AnimPaste");
}

global proc string[] asGetControlSetsFromUI (string $uiName)
{
string $controlSets[];
string $tempString[];
string $controlSetsText;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
if (`text -q -ex ($uiName+"ControlSetsText")`)
	{
	$controlSetsText=`text -q -l ($uiName+"ControlSetsText")`;
	tokenize $controlSetsText $tempString;
	for ($i=0;$i<size($tempString);$i++)
		if (`objExists ($nameSpace+$tempString[$i])`)
			$controlSets[size($controlSets)]=$nameSpace+$tempString[$i];
	}
else if ($uiName=="asPoserDefault" && `menuItem -q -ex asPoserControlSetsMenu`)
	{
	$tempString=`menu -q -ia asPoserControlSetsMenu`;
	for ($i=0;$i<size($tempString);$i++)
		if (`menuItem -q -cb $tempString[$i]`)
			$controlSets[size($controlSets)]=$nameSpace+`menuItem -q -l $tempString[$i]`;
	}
else
	$controlSets[0]=$nameSpace+"ControlSet";

return $controlSets;
}

global proc asDeleteStaticChannels (string $uiName)
{
if (`confirmDialog -title "Confirm" -message 
	("Clean animation ?\n"
	+"This will delete static channels,\n"
	+"which means remove all animation where the value is not changing")
    -button "Yes" -button "No" -defaultButton "Yes"
    -cancelButton "No" -dismissString "No"`!="Yes")
	return;
string $sel[]=`ls -sl`;
string $controlSets[]=`asGetControlSetsFromUI $uiName`;
select $controlSets;
evalEcho "delete -staticChannels -unitlessAnimationCurves false -hierarchy none -controlPoints 0 -shape 1";
print ("Static channels cleaned\n");
select $sel;
}
	
global proc string asPoserGetCmd (string $uiName, int $anim)
{
global string $gChannelBoxName;
global string $gMainProgressBar;
string $sel[]=`ls -sl`;
string $selectedMainAttrs[]=`channelBox -q -sma $gChannelBoxName`;
string $selectedShapeAttrs[]=`channelBox -q -ssa $gChannelBoxName`;
string $selectedHistoryAttrs[]=`channelBox -q -sha $gChannelBoxName`;
string $selectedOutputAttrs[]=`channelBox -q -soa $gChannelBoxName`;
string $selectedAttrs[];
$selectedAttrs=`stringArrayCatenate $selectedMainAttrs $selectedShapeAttrs`;
$selectedAttrs=`stringArrayCatenate $selectedAttrs $selectedHistoryAttrs`;
$selectedAttrs=`stringArrayCatenate $selectedAttrs $selectedOutputAttrs`;
int $ctrlButton,$altButton;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
if ((`getModifiers`/8) %  2)
	$altButton=1;
int $onlySel;
if ($uiName=="asPoserDefault")
	{
	if (`checkBox -q -ex asPoserOnlySel`)
		$onlySel=`checkBox -q -v asPoserOnlySel`;
	}
else if ($altButton || $ctrlButton)
	$onlySel=1;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
string $cmd;
string $controls[],$buffer[];
int $weightedTangents[];
int $onlyOneObj,$onlyOneAttr;
string $connectObj;
string $controlSets[]=`asGetControlSetsFromUI $uiName`;
if (!$onlySel && !size($controlSets))
	error "No ControlSets";

//determine the name for poserAnimFile
string $animationFile,$animationFilePath;
string $gridOrder[];
int $childNum;
if (`gmatch $uiName "asPoser*"`)
	{
	$gridOrder=`gridLayout -q -go ($uiName+"GridLayout")`;
	for ($i=1;$i<size($gridOrder)+1;$i++)
		if (`gmatch $gridOrder[$i-1] "asPoser*"`)
			$childNum=$i;
	$childNum++;

	$animationFile="untitled_"+$childNum;
	$animationFilePath=`internalVar -utd`+"AdvancedSkeleton/Poser/untitled/";
	}
else
	{
	$animationFile="ClipBoard";
	$animationFilePath=`internalVar -utd`+"AdvancedSkeleton/Selector/";
	}

string $animCurves[];

if ($onlySel)
	{
	for ($i=$y=0;$i<size($sel);$i++)
		{
		if (`gmatch $sel[$i] ($nameSpace+"*")`)
			{
			tokenize $sel[$i] ":" $buffer;
			$controls[$y]=$buffer[size($buffer)-1];
			$y++;
			}
		}
	}
else
	{
	if (!`objExists $controlSets[0]`)
		error ("Object :\""+$controlSets[0]+"\" does not exists !\n");
	$controls=`sets -q $controlSets`;
	for ($i=0;$i<size($controls);$i++)
		$controls[$i]=`substitute  $nameSpace $controls[$i] ""`;
	}
string $attrs[];
if (size($controls)<1)
	error "No Controls Available!";
evalDeferred ("progressBar -e -ep "+$gMainProgressBar);
progressBar -e -st "Storing Data" -bp -ii 1 -min 0 -max (size($controls)) $gMainProgressBar;
select -cl;

if ($anim)
	{
	createNode -n poserAnimationInfo transform;
	addAttr -ln "cmd" -dt "string" poserAnimationInfo;
	select poserAnimationInfo;
	}

	{
for ($obj in $controls)
	{
	progressBar -e -s 1 $gMainProgressBar;
	if (`progressBar -q -ic $gMainProgressBar`)
		error "Interrupted";
	$allKeyableAttrs=`listAttr -k -m -sn ($nameSpace+$obj)`;
	if ($onlySel && (size($selectedAttrs)>0))
		$attrs=$selectedAttrs;
	else
		$attrs=$allKeyableAttrs;
	for ($attr in $attrs)
		for ($allKeyableAttr in $allKeyableAttrs)
			if ($attr==$allKeyableAttr)
				{
				if (!$anim)
					$cmd+=$obj+"."+$attr+" "+`getAttr ($nameSpace+$obj+"."+$attr)`+";";
				else
					{
					//Animation
					$animCurves=`listConnections -type animCurve -s 1 -d 0 ($nameSpace+$obj+"."+$attr)`;
					for ($y=0;$y<size($animCurves);$y++)
						{
						select -add $animCurves[$y];
						$cmd+=$obj+"."+$attr+" "+`getAttr ($nameSpace+$obj+"."+$attr)`+" "+$animCurves[$y]+";";
						}
					}
				}
		}
	}

if ($anim)
	{
	setAttr -type "string" poserAnimationInfo.cmd $cmd;
	file -f -op "v=0" -typ "mayaAscii" -es ($animationFilePath+$animationFile+".ma");
	delete poserAnimationInfo;
	}

if ($cmd!="")
	{
	if (!$anim)
		$cmd="asSetAttrs "+$uiName+" \""+$cmd+"\"";
	else
		$cmd="asLoadAttrs "+$uiName;
	}

select $sel;
return $cmd;
}

global proc asSetAttrs (string $uiName, string $cmds)
{
int $ctrlButton,$altButton;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
if ((`getModifiers`/8) %  2)
	$altButton=1;
string $buffer[],$buffer2[];
string $objAttr;
float $value;
int $numTok=`tokenize $cmds ";" $buffer`;
int $showWarning;
string $warningMsg="The following attributes can not be set:";

for ($i=0;$i<$numTok;$i++)
	{
	tokenize $buffer[$i] $buffer2;
	$objAttr=$buffer2[0];
	$value=$buffer2[1];
	$objAttr=`asPoserResolveNameSpace $uiName $objAttr`;
	if (($ctrlButton||$altButton) && `gmatch $objAttr "*Main.*"`)
		continue;
	if (`objExists $objAttr`)
		catch (`eval ("setAttr "+$objAttr+" "+$value)`);
	else
		{
		$showWarning=1;
		$warningMsg+=$objAttr+",";
		}
	}
if ($showWarning)
	warning $warningMsg;
}

global proc asLoadAttrs (string $uiName, int $childNum)
{
string $sel[]=`ls -sl`;
int $autoKey=`autoKeyframe -q -st`;
if ($autoKey)
	autoKeyframe -e -st 0;
createNode -n tempXform transform;
int $shiftButton,$ctrlButton,$altButton;
if (`getModifiers` %  2)
	$shiftButton=1;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
if ((`getModifiers`/8) %  2)
	$altButton=1;
float $timeOffset=0;
if ($shiftButton)
	$timeOffset=`currentTime -q`;
string $buffer[],$buffer2[],$buffer3[],$tempString[];
string $obj,$attr,$objAttr,$animCurve,$newAnimCurve;
float $value;

string $animationFile,$projectName;

if ($childNum==0)
	{
	$projectName="Selector";
	$animationFile=`internalVar -utd`+"AdvancedSkeleton/Selector/ClipBoard.ma";
	}
else
	{
	string $icon=`iconTextButton -q -i ($uiName+"IconTextButton"+$childNum)`;
	string $tempString[];
	tokenize $icon "/" $tempString;
	$projectName=$tempString[size($tempString)-2];
	$animationFile=`substitute "[.][a-z][a-z][a-z]" $icon ".ma"`;
	}
file -r -type "mayaAscii" -namespace $projectName -options "v=0;p=17" $animationFile;

string $cmds=`getAttr ($projectName+":poserAnimationInfo.cmd")`;
int $numTok=`tokenize $cmds ";" $buffer`;
int $showWarning;
string $warningMsg="The following attributes can not be set:";
for ($i=0;$i<$numTok;$i++)
	{
	tokenize $buffer[$i] $buffer2;
	$objAttr=$buffer2[0];
	tokenize $objAttr "." $buffer3;
	$obj=$buffer3[0];
	$attr=$buffer3[1];
	$value=$buffer2[1];
	$animCurve=$buffer2[2];
	$objAttr=`asPoserResolveNameSpace $uiName $objAttr`;
	if (($ctrlButton||$altButton) && `gmatch $objAttr "*Main.*"`)
		continue;
	if (`objExists $objAttr`)
		{
		catch (`eval ("setAttr "+$objAttr+" "+$value)`);
		if (!`attributeExists $attr tempXform`)
			addAttr -k 1 -ln $attr -at double tempXform;
		connectAttr -f ($projectName+":"+$animCurve+".output") ("tempXform."+$attr);
		copyKey -time ":" -hierarchy none -at $attr tempXform;
		pasteKey -option merge -copies 1 -connect 0 -timeOffset $timeOffset -floatOffset 0 -valueOffset 0 {$obj};
		}
	else
		{
		$showWarning=1;
		$warningMsg+=$objAttr+",";
		}
	}
if ($showWarning)
	warning $warningMsg;

if (`objExists tempXform`)
	delete tempXform;
file -rr  $animationFile;
select $sel;
if ($autoKey)
	autoKeyframe -e -st 1;
}

global proc asKeyAttrs (string $uiName, string $cmds)
{
int $ctrlButton,$altButton;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
if ((`getModifiers`/8) %  2)
	$altButton=1;
string $buffer[],$buffer2[],$spaceBuffer[];
string $objAttr,$previousObjAttr,$restOfBuffers;
float $time,$value,$currentValue;
float $currentTime=`currentTime -q`;
int $numTok=`tokenize $cmds ";" $buffer`;
int $showWarning,$firstValueSet;
string $warningMsg="The following attributes can not be keyed:";
float $firstValue;
for ($i=0;$i<$numTok;$i++)
	{
	tokenize $buffer[$i] $buffer2;
	$objAttr=$buffer2[0];
	$objAttr=`asPoserResolveNameSpace $uiName $objAttr`;
	$restOfBuffers="";
	if ($objAttr!=$previousObjAttr)
		$firstValueSet=0;
	$previousObjAttr=$objAttr;
	for ($y=1;$y<size($buffer2);$y++)
		$restOfBuffers+=$buffer2[$y]+" ";
	if (`objExists $objAttr`)
		{
		tokenize $restOfBuffers $spaceBuffer;
		for ($y=0;$y<size($spaceBuffer);$y++)
			{
			//TimeOffset
			if ($spaceBuffer[$y]=="-t" && ($ctrlButton||$altButton))
				{
				$time=$spaceBuffer[$y+1];
				$spaceBuffer[$y+1]=$time+$currentTime;
				}
			//ValueOffset
			if ($spaceBuffer[$y]=="-v" && $ctrlButton)
				{
				$value=$spaceBuffer[$y+1];
				$currentValue=`getAttr $objAttr`;
				if (!$firstValueSet)
				$firstValue=$value;
				$firstValueSet=1;
				$spaceBuffer[$y+1]=$value+$currentValue-$firstValue;
				}
			}
		$restOfBuffers="";
		for ($y=0;$y<size($spaceBuffer);$y++)
			$restOfBuffers+=$spaceBuffer[$y]+" ";
		eval ($restOfBuffers+$objAttr);
		}
	else
		{
		$showWarning=1;
		$warningMsg+=$objAttr+",";
		}
	}
if ($showWarning)
	warning $warningMsg;
}

global proc asPoseView (string $uiName, int $childNum)
{
string $icon=`iconTextButton -q -i ($uiName+"IconTextButton"+$childNum)`;
int $anim=`rowColumnLayout -q -ann ($uiName+"RowColumnLayout"+$childNum)`;
string $tempString[];
tokenize $icon "/" $tempString;
string $projectName=$tempString[size($tempString)-2];

string $mediaFile;
if ($anim)
	$mediaFile=`substitute "[.][a-z][a-z][a-z]" $icon ".avi"`;
else
	$mediaFile=`substitute "[.][a-z][a-z][a-z]" $icon ".jpg"`;
print ($mediaFile+"\n");
system ("load "+$mediaFile);
}

global proc asPoseObjects (string $uiName, string $button,string $action)
{
string $cmd=`iconTextButton -q -c $button`;
string $buffer[],$buffer2[];
string $objAttr,$value;
tokenize $cmd "\"" $buffer;
$cmd=$buffer[1];
int $numTok=`tokenize $cmd ";" $buffer`;
int $showWarning;
string $warningMsg="The following objects can not be found:";
if ($action==" select -add")
select -cl;
for ($i=0;$i<$numTok;$i++)
	{
	tokenize $buffer[$i] $buffer2;
	$objAttr=$buffer2[0];
	$value=$buffer2[1];
	tokenize $objAttr "." $buffer2;
	$obj=$buffer2[0];
	if ($action!=" select -add")
		$obj=$objAttr;
	$obj=`asPoserResolveNameSpace $uiName $obj`;
	if (`objExists $obj`)
		eval ($action+" "+$obj);
	else
		{
		$showWarning=1;
		$warningMsg+=$obj+",";
		}
	}
if ($showWarning)
	warning $warningMsg;
}

global proc asMirrorOptions (string $uiName)
{
if (`window -q -ex asMirrorOptions`)
	deleteUI asMirrorOptions;
window -t "Mirror Options" asMirrorOptions;
columnLayout -adj 1;
	separator -h 25 -st "none";
	rowLayout -nc 4 -cw 1 40;
		text -l "side:";
		radioCollection asMOSideRadioCollection;
		radioButton -label "Swap" asMOSideFlip;
		radioButton -label "Right To Left" asMOSideR2L;
		radioButton -label "Left To Right" asMOSideL2R;
		setParent..;
	rowLayout -nc 4 -cw 1 40;
		text -l "axis:";
		radioCollection asMOAxisRadioCollection;
		radioButton -label "X" asMOAxisX;
		radioButton -label "Y" asMOAxisY;
		radioButton -label "Z" asMOAxisZ;
		radioCollection -e -sl "asMOAxisX" asMOAxisRadioCollection;
		setParent..;
	rowLayout -nc 4 -cw 1 40;
		text -l "space:";
		radioCollection asMOSpaceRadioCollection;
		radioButton -label "World" asMOSpaceWorld;
		radioButton -label "Main" asMOSpaceMain;
		radioButton -label "RootX_M" asMOSpaceCenter;
		radioCollection -e -sl "asMOSpaceWorld" asMOSpaceRadioCollection;
		setParent..;
	rowLayout -nc 4 -cw 1 40;
		text -l "control:";
		radioCollection asMOSelOnlyRadioCollection;
		radioButton -label "All" asMOSelOnlyAll;
		radioButton -label "Selected" asMOSelOnlySel;
		radioCollection -e -sl "asMOSelOnlyAll" asMOSelOnlyRadioCollection;
		setParent..;

separator -st "none" -h 25;
button -w 100 -l "Mirror" -c ("asMirror "+$uiName);
showWindow;

string $optionVars[]={"asMOSide","asMOSpace","asMOAxis","asMOSelOnly"};
string $cia[];
string $radioCollection,$selected,$optionVarString;
for ($i=0;$i<size($optionVars);$i++)
	{
	$radioCollection=$optionVars[$i]+"RadioCollection";
	$cia=`radioCollection -q -cia $radioCollection`;
	$selected=$cia[0];
	if (`optionVar -ex $optionVars[$i]`)
		{
		$optionVarString=`optionVar -q $optionVars[$i]`;
		for ($y=0;$y<size($cia);$y++)
			if (`gmatch $cia[$y] ("*"+$optionVarString)`)
				$selected=`optionVar -q $optionVars[$i]`;
		}
	radioCollection -e -sl $selected $radioCollection;
	}
}

global proc asMirror (string $uiName)
{
if (!`window -q -ex $uiName`)
	error ("Window : "+$uiName+" not found !");
string $side="asMOSideR2L";
string $space="asMOSpaceMain";
string $axis="asMOAxisX";
string $selOnly="asMOSelOnlyAll";
if (`window -q -ex asMirrorOptions`)
	{
	$side=`radioCollection -q -sl asMOSideRadioCollection`;
	$space=`radioCollection -q -sl asMOSpaceRadioCollection`;
	$axis=`radioCollection -q -sl asMOAxisRadioCollection`;
	$selOnly=`radioCollection -q -sl asMOSelOnlyRadioCollection`;
	optionVar -sv asMOSide $side;
	optionVar -sv asMOSpace $space;
	optionVar -sv asMOAxis $axis;
	optionVar -sv asMOSelOnly $selOnly;
	}
if (`optionVar -ex asMOSide`)
	$side=`optionVar -q asMOSide`;
if (`optionVar -ex asMOSpace`)
	$space=`optionVar -q asMOSpace`;
if (`optionVar -ex asMOAxis`)
	$axis=`optionVar -q asMOAxis`;
if (`optionVar -ex asMOSelOnly`)
	$selOnly=`optionVar -q asMOSelOnly`;
string $sel[]=`ls -sl`;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
string $controlSets[]=`asGetControlSetsFromUI $uiName`;
string $controls[]=`sets -q $controlSets`;
string $sortedControls[];
if (`stringArrayCount "Main" $controlSets`)
	$sortedControls={"Main","RootX_M","CenterExtra_M"};

for ($i=0;$i<size($controls);$i++)
	if (`gmatch $controls[$i] ($nameSpace+"IK*Spine*")`)
		$sortedControls[size($sortedControls)]=$controls[$i];
for ($i=0;$i<size($controls);$i++)
	if (`gmatch $controls[$i] ($nameSpace+"IK*Leg_*")` || `gmatch $controls[$i] ($nameSpace+"IK*Arm_*")` || `gmatch $controls[$i] ($nameSpace+"Pole*")`)
		$sortedControls[size($sortedControls)]=$controls[$i];
for ($i=0;$i<size($controls);$i++)
	if (!`stringArrayCount $controls[$i] $sortedControls`)
		$sortedControls[size($sortedControls)]=$controls[$i];
$controls=$sortedControls;
if ($selOnly=="asMOSelOnlySel")
	$controls=$sel;
string $allKeyableAttrs[],$tempString[];
string $source,$dest,$cmd,$loc1,$loc2;
float $pos[3],$rot[3];
int $wsXform[];
int $flip;
int $isFaceControl;
string $flipAxis,$t0;
if ($axis=="asMOAxisX")
	{$flipAxis="X";$t0="tx";}
if ($axis=="asMOAxisY")
	{$flipAxis="Y";$t0="ty";}
if ($axis=="asMOAxisZ")
	{$flipAxis="Z";$t0="tz";}

createNode -n flipGroup transform;
if ($space=="asMOSpaceCenter")
	parent flipGroup ($nameSpace+"RootX_M");
if ($space=="asMOSpaceMain")
	parent flipGroup ($nameSpace+"Main");
xform -os -t 0 0 0 -ro 0 0 0 flipGroup;
if ($space=="asMOSpaceCenter" || $space=="asMOSpaceMain")
	parent -w flipGroup;
for ($i=0;$i<size($controls);$i++)
	{
	if ($side!="asMOSideFlip")
		if (`gmatch $controls[$i] "*_M"` || `gmatch $controls[$i] "*Main"`)
			continue;
	if ($side=="asMOSideR2L")
		{
		if (`gmatch $controls[$i] "*_L"`)
			continue;
		$dest=`substitute "_R" $controls[$i] "_L"`;
		}
	else if ($side=="asMOSideL2R")
		{
		if (`gmatch $controls[$i] "*_R"`)
			continue;
		$dest=`substitute "_L" $controls[$i] "_R"`;
		}
	else if ($side=="asMOSideFlip")
		{
		if (!`gmatch $controls[$i] "*_L"` && !`gmatch $controls[$i] "*_R"` && !`gmatch $controls[$i] "*_M"`)
			continue;
		if (`gmatch $controls[$i] "*FKExtraSpine1_M"`)
			continue;
		if (`gmatch $controls[$i] "*_L"`)
			$dest=`substitute "_L" $controls[$i] "_R"`;
		if (`gmatch $controls[$i] "*_R"`)
			$dest=`substitute "_R" $controls[$i] "_L"`;
		if (`gmatch $controls[$i] "*_M"`)
			$dest=$controls[$i];
		}
	$isFaceControl=0;
	if (`objExists ($nameSpace+"FaceControlSet")`)
		if (`sets -im ($nameSpace+"FaceControlSet") $controls[$i]`)
			$isFaceControl=1;
	$source=$controls[$i];
	$allKeyableAttrs=`listAttr -k -m -sn $controls[$i]`;
	for ($y=0;$y<size($allKeyableAttrs);$y++)
		{
		$flip=1;
		if (`gmatch $controls[$i] ($nameSpace+"FK*_L")` || `gmatch $controls[$i] ($nameSpace+"FK*_R")`
		 || `gmatch $controls[$i] ($nameSpace+"Bend*_L")` || `gmatch $controls[$i] ($nameSpace+"Bend*_R")`)
		 	{
		 	if ($allKeyableAttrs[$y]=="tx" || $allKeyableAttrs[$y]=="ty" || $allKeyableAttrs[$y]=="tz")
		 		$flip=-1;
		 	}
		else
			if ($allKeyableAttrs[$y]=="tz" || $allKeyableAttrs[$y]=="rx" || $allKeyableAttrs[$y]=="ry")
				$flip=-1;
		if ($isFaceControl && !`gmatch $controls[$i] ($nameSpace+"ctrl*")`)
			{
			if ($allKeyableAttrs[$y]=="tx" || $allKeyableAttrs[$y]=="ry" || $allKeyableAttrs[$y]=="rz")
				$flip=-1;
			else
				$flip=1;
			}
		if (`gmatch $controls[$i] ($nameSpace+"Aim*")` || `gmatch $controls[$i] ($nameSpace+"IK*")` || `gmatch $controls[$i] ($nameSpace+"Pole*")` || `gmatch $controls[$i] ($nameSpace+"RootX_M*")`)
			$wsXform[$i]=1;
		if (!$wsXform[$i])
			if (`getAttr -se ($dest+"."+$allKeyableAttrs[$y])`)
				$cmd+="setAttr "+$dest+"."+$allKeyableAttrs[$y]+" "+(`getAttr ($source+"."+$allKeyableAttrs[$y])`*$flip)+";";
		}

	if ($wsXform[$i])
		{
		$tempString=`spaceLocator`;
		$loc1=$tempString[0];
		$tempString=`spaceLocator`;
		$loc2=$tempString[0];
		parent $loc2 $loc1;
		parent $loc1 $source;
		xform -os -t 0 0 0 -ro 0 0 0 $loc1;
		setAttr ($loc1+".rotateOrder") `getAttr ($source+".rotateOrder")`;
		setAttr ($loc2+".rotateOrder") `getAttr ($source+".rotateOrder")`;
		setAttr ("flipGroup.scale"+$flipAxis) 1;
		parent $loc1 flipGroup;
		setAttr ("flipGroup.scale"+$flipAxis) -1;
		setAttr ($loc1+".scaleX") -1;
		$pos=`xform -q -ws -t $loc2`;
		$rot=`xform -q -ws -ro $loc2`;
		$cmd+="xform -ws -t "+$pos[0]+" "+$pos[1]+" "+$pos[2]+" -ro "+$rot[0]+" "+$rot[1]+" "+$rot[2]+" "+$dest+";";
		}

	if (`attributeExists "mirror" $controls[$i]`)
		setAttr ($controls[$i]+".mirror") 0;
	}
delete flipGroup;
eval ($cmd);
select $sel;
}

global proc asGoToBuildPose (string $uiName)
{
int $ctrlButton;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
string $nameSpace;
string $controlSets[];
if ($uiName=="bodySetup")
	{
	$nameSpace="";
	$controlSets[0]="ControlSet";
	}
else if ($uiName=="faceSetup")
	{
	$nameSpace="";
	$controlSets[0]="FaceControlSet";
	}
else
	{
	$nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
	$controlSets=`asGetControlSetsFromUI $uiName`;
	}
if ($nameSpace==":")
	$nameSpace="";

string $buildPose="buildPose";
if (`gmatch $controlSets[0] "*FaceControlSet"`)
    $buildPose="faceBuildPose";

string $tempString[],$tempString2[],$buffer[];
string $setAttrCmd,$cmd;


$setAttrCmd=`getAttr ($nameSpace+$buildPose+".udAttr")`;
tokenize $setAttrCmd ";" $tempString;
for ($y=0;$y<size($tempString);$y++)
	{
	$cmd=$tempString[$y];
	if ($cmd=="")
		continue;
	if ($nameSpace!="")
		{
		tokenize $cmd $buffer;
		if (`gmatch $cmd "xform*"`)
			$substituteWordNr=size($buffer)-1;
		else
			$substituteWordNr=1;
		$cmd="";
		for ($z=0;$z<size($buffer);$z++)
			{
			if ($z==$substituteWordNr)
				$cmd+=$nameSpace;
			$cmd+=$buffer[$z]+" ";
			}
		}
	if ($ctrlButton)
		if (`gmatch $cmd "*Main.*"`)
			continue;
	if (catchQuiet (`eval ($cmd)`)) warning ("Failed: "+$cmd+"\n");
	}

//run
string $run,$fitTopNode,$cmd,$objAttr;
for ($i=0;$i<size($controlSets);$i++)
	{
	if (`gmatch $controlSets[$i] "*ControlSet"`)
		if (`objExists ($nameSpace+"FitSkeleton")`)
			$fitTopNode=$nameSpace+"FitSkeleton";
	if (`gmatch $controlSets[$i] "*FaceControlSet"`)
		$fitTopNode=($nameSpace+"FaceFitSkeleton");
	}

if (`objExists $fitTopNode`)
	if (`attributeExists "run" $fitTopNode`)
		{
		$run=`getAttr ($fitTopNode+".run")`;
		if ($nameSpace=="")
			catch (`evalEcho ($run)`);
		else
			{
			tokenize $run ";" $tempString;
			for ($i=0;$i<size($tempString);$i++)
				{
				tokenize $tempString[$i] $tempString2;
				$objAttr=`substitute "\"" $tempString2[1] ""`;
				$objAttr=`substitute "\"" $objAttr ""`;
				$cmd=$tempString2[0]+" "+$nameSpace+$objAttr+" "+$tempString2[2]+";";
				catch (`evalEcho ($cmd)`);
				}
			}
		}
}

global proc asPoserupdateGridBlock (string $uiName, int $childNum)
{
string $existingPopUpMenus[]=`control -q -pma ($uiName+"IconTextButton"+$childNum)`;
for ($pop in $existingPopUpMenus)
	deleteUI $pop;

int $anim=`rowColumnLayout -q -ann ($uiName+"RowColumnLayout"+$childNum)`;
string $button=$uiName+"IconTextButton"+$childNum;
string $viewCmd="asPoseView "+$uiName+" "+$childNum;
string $selectCmd="asPoseObjects "+$uiName+" "+$button+"\" select -add\"";
string $keyCmd="asPoseObjects "+$uiName+" "+$button+" setKeyframe";
string $linearKeyCmd="asPoseObjects "+$uiName+" "+$button+" \"setKeyframe -itt linear -ott linear\"";

popupMenu -p ($uiName+"IconTextButton"+$childNum);
	menuItem -l "View" -c $viewCmd;
	if (!$anim)
		{
		menuItem -d 1;
		menuItem -l "Select" -c $selectCmd;
		menuItem -l "Key" -c $keyCmd;
		menuItem -l "LinearKey" -c $linearKeyCmd;
		}
	if ($uiName=="asPoserDefault")
		{
		menuItem -d 1;
		menuItem -l "Label Button" -c ("asPoserRename "+$childNum);
		menuItem -l "Remove Button" -c ("asPoserDeletePose "+$uiName+" "+$childNum);
		menuItem -l "Update icon" -c ("asPoserSnapShoot "+$uiName+" "+$childNum+" "+$anim+" 1 0");
		if ($anim)
			menuItem -l "Update movie" -c ("asPoserSnapShoot "+$uiName+" "+$childNum+" "+$anim+" 0 1");
		}
}

global proc string asPoserResolveNameSpace (string $uiName, string $obj)
{
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
return ($nameSpace+$obj);
}

global proc asDynRemove (string $uiName)
{
string $sel[]=`ls -sl`;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
if (!size($sel))
	error ("nothing selected");
for ($i=0;$i<size($sel);$i++)
	if (!`gmatch $sel[$i] ($nameSpace+"FK*")`)
		error ($sel[$i]+" is not a FK control");
for ($i=0;$i<size($sel);$i++)
	{
	string $dynObj="dynamics"+`substitute ($nameSpace+"FK") $sel[$i] ""`;
	if(`objExists $dynObj`)
		{
		delete $dynObj;
		print ("// Dynamics for "+$sel[$i]+" removed\n");
		}
	else
		print ("// No dynamics for "+$sel[$i]+" found\n");
	}
}

global proc asDynAdd (string $uiName)
{
string $sel[]=`ls -sl`;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
if (!size($sel))
	error ("nothing selected");
for ($i=0;$i<size($sel);$i++)
	if (!`gmatch $sel[$i] ($nameSpace+"FK*")`)
		error ($sel[$i]+" is not a FK control");
global string $gSelect;
setToolTo $gSelect;

string $deformJoints[];
for ($i=0;$i<size($sel);$i++)
	{
	$deformJoints[$i]=`substitute ($nameSpace+"FK") $sel[$i] ($nameSpace+"")`;
	if (`objExists ("dynamics"+$deformJoints[$i])`)
		error ("dynamics for "+$deformJoints[$i]+" already exists");
	}
$dynSortedDeformJoints=`asResolveDynJoints $nameSpace $deformJoints`;
asDynAddChain $nameSpace $dynSortedDeformJoints;
}

global proc asDynAddChain (string $nameSpace, string $dynSortedDeformJoints[])
{
string $dynJoints[],$tempString[];
string $name;
for ($i=0;$i<size($dynSortedDeformJoints);$i++)
	{
	select $dynSortedDeformJoints[$i];
	$dynJoints[$i]="dyn"+`substitute $nameSpace $dynSortedDeformJoints[size($dynSortedDeformJoints)-1] ""`+$i;
	joint -n $dynJoints[$i];
	}
string $startJoint=$dynJoints[0];
string $endJoint=$dynJoints[size($dynJoints)-1];

string $dynTopNode="dynamics"+`substitute $nameSpace $dynSortedDeformJoints[size($dynSortedDeformJoints)-1] ""`;
if (!`objExists "Dynamics"`)
	createNode -n Dynamics transform;
createNode -n ($dynJoints[0]+"Offset") transform;
int $foundParentFK;
string $parentFK,$fk;
string $joint=$dynSortedDeformJoints[0];
while($parentFK=="")
	{
	$tempString=`listRelatives -type joint -p $joint`;
	if ($tempString[0]=="")
		$parentFK=$nameSpace+"RootX_M";
	else
		{
		$joint=$tempString[0];
		if ($nameSpace=="")
			$fk="FK"+$joint;
		else
			$fk=`substitute $nameSpace $joint ($nameSpace+"FK")`;
		if (`objExists $fk`)
			$parentFK=$fk;
		}
		
	}
parentConstraint $parentFK ($dynJoints[0]+"Offset");
createNode -n $dynTopNode transform;
parent ($dynJoints[0]+"Offset") $dynTopNode;
parent $dynTopNode Dynamics;
setAttr ($dynTopNode+".overrideEnabled") 1;
setAttr ($dynTopNode+".overrideDisplayType") 2;

for ($i=1;$i<size($dynJoints);$i++)
	parent $dynJoints[$i] $dynJoints[$i-1];
string $tempString[]=`ikHandle -n ("DynIKHandle"+$endJoint) -ns 2 -sol ikSplineSolver -sj $startJoint -ee $endJoint`;
rename $tempString[1] ("DynIKEffector"+$endJoint);
string $ikCurve=`rename $tempString[2] ("DynIKCurve"+$endJoint)`;
parent ("DynIKHandle"+$endJoint) $dynTopNode;

parent $dynJoints[0] ($dynJoints[0]+"Offset");

//remove existing
string $dynNodes[]={("DynParticle"+$endJoint),("DynIKCurveSoft"+$endJoint),("DynParticleArrayMapper"+$endJoint),("DynParticleRamp"+$endJoint)};
for ($node in $dynNodes)
	if (`objExists $node`)
		delete $node;

//$numCv
int $numCv;
$form=`getAttr ($ikCurve+".form")`;
$spans=`getAttr ($ikCurve+".spans")`;
$degrees=`getAttr ($ikCurve+".degree")`;
if ($form==2)
	$numCv=$spans;
else
	$numCv=$spans+$degrees;

//soft
$tempString=`soft -d -g 1 -c ("DynIKCurve"+$endJoint)`;
rename $tempString[0] ("DynParticle"+$endJoint);
$tempString=`listRelatives -p ("DynParticle"+$endJoint)`;
rename $tempString[0] ("DynIKCurveSoft"+$endJoint);
rename ("copyOfDynIKCurve"+$endJoint)  ("copyOfDynIKCurveDeform"+$endJoint);
parent ("DynIKCurveSoft"+$endJoint) ("copyOfDynIKCurveDeform"+$endJoint) $dynTopNode;

//mass
for ($i=0;$i<$numCv;$i++)
	{
	float $massPP=($i+0.00)/$numCv;
	if ($massPP==0)
		$massPP=0.01;
	particle -e -or $i -at mass -fv $massPP ("DynParticle"+$endJoint);
	}

//arrayMapper
$tempString=`arrayMapper -target ("DynParticle"+$endJoint) -destAttr goalPP -inputV mass -type ramp`;
rename $tempString[0] ("DynParticleArrayMapper"+$endJoint);

$tempString=`listConnections -s 1 -d 0 ("DynParticleArrayMapper"+$endJoint+".computeNodeColor")`;
rename $tempString[0] ("DynParticleRamp"+$endJoint);
removeMultiInstance -break true ("DynParticleRamp"+$endJoint+".colorEntryList[1]");
setAttr ("DynParticleRamp"+$endJoint+".colorEntryList[0].position") 0;
setAttr ("DynParticleRamp"+$endJoint+".colorEntryList[2].position") 1;
setAttr ("DynParticleRamp"+$endJoint+".colorEntryList[0].color") -type double3 1 1 1 ;
setAttr ("DynParticleRamp"+$endJoint+".colorEntryList[2].color") -type double3 0 0 0;

string $fkEnd;
int $arrayNr=size($dynSortedDeformJoints)-1;
if ($nameSpace=="")
	$fkEnd="FK"+$dynSortedDeformJoints[$arrayNr];
else
	$fkEnd=`substitute $nameSpace $dynSortedDeformJoints[$arrayNr] ($nameSpace+"FK")`;
if (!`attributeExists blend $fkEnd`)
	addAttr -k 1 -ln blend -at double -min 0 -max 1 -dv 1 $fkEnd;
if (!`attributeExists baseGoal $fkEnd`)
	addAttr -k 1 -ln baseGoal -at double -min 0 -max 1 -dv 1 $fkEnd;
if (!`attributeExists tipGoal $fkEnd`)
	addAttr -k 1 -ln tipGoal -at double -min 0 -max 1 -dv 0.6 $fkEnd;
if (!`attributeExists conserve $fkEnd`)
	addAttr -k 1 -ln conserve -at double -min 0 -max 1 -dv 0.75 $fkEnd;
connectAttr ($fkEnd+".baseGoal") ("DynParticleArrayMapper"+$endJoint+".maxValue");
connectAttr ($fkEnd+".tipGoal") ("DynParticleArrayMapper"+$endJoint+".minValue");
connectAttr ($fkEnd+".conserve") ("DynParticle"+$endJoint+".conserve");

//skinCurve
select -cl;
string $fkx;
for ($i=0;$i<size($dynSortedDeformJoints);$i++)
	{
	if ($nameSpace=="")
		$fkx="FKX"+$dynSortedDeformJoints[$i];
	else
		$fkx=`substitute $nameSpace $dynSortedDeformJoints[$i] ($nameSpace+"FKX")`;
	if (`objExists $fkx`)
		select -add $fkx;
	}
select -add ("copyOfDynIKCurveDeform"+$endJoint);
newSkinCluster "-toSelectedBones -mi 1 -dr 4 -rui false";

//pairBlend
for ($i=0;$i<size($dynSortedDeformJoints);$i++)
	{
	if ($i>0)
		{
		$tempString[0]=`pairBlend -nd $dynSortedDeformJoints[$i] -at tx -at ty -at tz`;
		rename $tempString[0] ("parBlendT"+$dynJoints[$i]);
		connectAttr -f ($dynJoints[$i]+".translate") ("parBlendT"+$dynJoints[$i]+".inTranslate2");
		}
	$tempString[0]=`pairBlend -nd $dynSortedDeformJoints[$i] -at rx -at ry -at rz`;
	rename $tempString[0] ("parBlendR"+$dynJoints[$i]);
	connectAttr -f ($dynJoints[$i]+".rotate") ("parBlendR"+$dynJoints[$i]+".inRotate2");
	connectAttr ($fkEnd+".blend") ("parBlendR"+$dynJoints[$i]+".weight");
	}

setAttr -l 1 ($startJoint+"Offset.v") 0;
setAttr -l 1 ("DynIKHandle"+$endJoint+".v") 0;
setAttr -l 1 ("copyOfDynIKCurveDeform"+$endJoint+".v") 0;

select $fkEnd;
}

global proc string[] asResolveDynJoints (string $nameSpace, string $joints[])
{
string $dynJoints[];
string $jointLongNames[],$tempStringA[],$tempStringB[];
for ($i=0;$i<size($joints);$i++)
	{
	$tempStringA=`ls -l $joints[$i]`;
	$jointLongNames[$i]=$tempStringA[0];
	}
string $sorted[]=`sort $jointLongNames`;
for ($i=1;$i<size($sorted);$i++)
	{
	$tempStringA=`ls $sorted[$i]`;
	$tempStringB=`ls $sorted[$i-1]`;
	if (!`gmatch $sorted[$i] ($sorted[$i-1]+"*")`)
	error ("\""+$tempStringA[0]+"\" is not a child of \""+$tempStringB[0]+"\", select controls in same hiarchy");
	}

string $dynEndJointLongName=$sorted[size($sorted)-1];
$tempStringA=`ls -sn $dynEndJointLongName`;
$dynJoints[0]=$tempStringA[0];
string $joint=$dynJoints[0];
int $reachedStartJoint,$reachedParentOfStartJoint;
while (!$reachedStartJoint)
	{
	$tempStringA=`listRelatives -p -f -type joint $joint`;
	if (!size($tempStringA))
		break;
	$jointLongName=$tempStringA[0];
	$tempStringA=`ls -sn $tempStringA[0]`;
	$joint=$tempStringA[0];
	if (size($joints)==1)
		{
		//single control selected
		if (!`stringArrayCount $jointLongName $sorted`)
			if (!`gmatch $joint "*Part[0-9]*"`)
				$reachedStartJoint=1;
		}
	else
		{
		//several controls selected
		if ($jointLongName==$sorted[0])
			$reachedStartJoint=1;
		}
	$dynJoints[size($dynJoints)]=$joint;
	}
string $dynJointReverse[];
for ($i=size($dynJoints)-1;$i>-1;$i--)
	$dynJointReverse[size($dynJointReverse)]=$dynJoints[$i];
return $dynJointReverse;
}

global proc asAnimBake (string $uiName)
{
if (`confirmDialog -title "Confirm" -message 
	("Bake character ?\n"
	+"This creates a single joint chain for game engine export\n"
	+"The rig controllers will no longer work")
    -button "Yes" -button "No" -defaultButton "Yes"
    -cancelButton "No" -dismissString "No"`!="Yes")
	return;
string $sel[]=`ls -sl`;
string $tempString[],$tempString2[];
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
string $name=`substitute ":" $nameSpace ""`;
string $bakeNameSpace=$name+"Bake:";
namespace -add ($name+"Bake");
namespace -set ($name+"Bake");
$tempString=`listRelatives -c ($nameSpace+"DeformationSystem")`;
$tempString=`duplicate $tempString[0]`;
string $topBakeJoint=$tempString[0];
parent -w $topBakeJoint;
$tempString=`listRelatives -ad $topBakeJoint`;
for ($i=0;$i<size($tempString);$i++)
	if (`objectType $tempString[$i]`!="joint")
		delete $tempString[$i];
string $allBakeJoints[]=`listRelatives -ad -type joint $topBakeJoint`;
$allBakeJoints[size($allBakeJoints)]=$topBakeJoint;
sets -rm ($nameSpace+"DeformSet") $allBakeJoints;
//Disable Skincluster
string $skinClusters[]=`ls -type skinCluster`;
for ($i=0;$i<size($skinClusters);$i++)
    setAttr ($skinClusters[$i]+".nodeState") 1;
//Constraint bakeSkeleton
string $deformJoints[]=`listRelatives -ad -type joint ($nameSpace+"DeformationSystem")`;
for ($i=0;$i<size($deformJoints);$i++)
    {
		if ($nameSpace=="")
			$bakeDeformJoint=$bakeNameSpace+$deformJoints[$i];
		else
			$bakeDeformJoint=`substitute $nameSpace $deformJoints[$i] $bakeNameSpace`;
    parentConstraint $deformJoints[$i] $bakeDeformJoint;
    scaleConstraint $deformJoints[$i] $bakeDeformJoint;
    }
//Bake
bakeResults -simulation true -t (`playbackOptions -q -min`+":"+`playbackOptions -q -max`) -sampleBy 1 -disableImplicitControl true -preserveOutsideKeys false -sparseAnimCurveBake false -removeBakedAttributeFromLayer false 
	-bakeOnOverrideLayer false -controlPoints false -shape false $allBakeJoints;
//Transfer deformation to bake skeleton
for ($i=0;$i<size($deformJoints);$i++)
{
    $tempString=`listConnections -s 0 -d 1 -p 1 -c 1 $deformJoints[$i]`;
    for ($y=0;$y<size($tempString);$y=$y+2)
        {        
        if ($nameSpace=="")
        	$newSource=$bakeNameSpace+$tempString[$y];
				else
	        $newSource=`substitute $nameSpace $tempString[$y] $bakeNameSpace`;
        catch (`connectAttr -f $newSource $tempString[$y+1]`);
        }
}
//Enable Skincluster
for ($i=0;$i<size($skinClusters);$i++)
    setAttr ($skinClusters[$i]+".nodeState") 0;

namespace -set ":";
select $allBakeJoints;
evalEcho "delete -staticChannels -unitlessAnimationCurves false -hierarchy none -controlPoints 0 -shape 1";
select $topBakeJoint;
print ("Selected joint chain is ready for export, add geometry to selection and export\n");
}

global proc asDynBake (string $uiName)
{
if (`confirmDialog -title "Confirm" -message "Bake all dynamics ?"
    -button "Yes" -button "No" -defaultButton "Yes"
    -cancelButton "No" -dismissString "No"`!="Yes")
	return;
asDynUnBake $uiName;
string $softDynCurves[]=`ls -type nurbsCurve "DynIKCurveSoftdyn*"`;
bakeResults -simulation true -t (`playbackOptions -q -min`+":"+`playbackOptions -q -max`) -sampleBy 1 -disableImplicitControl 0 -preserveOutsideKeys 0 -sparseAnimCurveBake false -controlPoints true -shape false $softDynCurves;
}

global proc asDynUnBake (string $uiName)
{
string $softDynCurves[]=`ls -type nurbsCurve "DynIKCurveSoftdyn*"`;
string $particles;
int $spans,$degrees,$numCv;
for ($i=0;$i<size($softDynCurves);$i++)
	{
	$particles=`substitute "DynIKCurveSoft" $softDynCurves[$i] "DynParticle"`;
	$particles=`substitute "Shape" $particles ""`;
	if (!`isConnected ($particles+".targetGeometry") ($softDynCurves[$i]+".create")`)
		connectAttr ($particles+".targetGeometry") ($softDynCurves[$i]+".create");
	if (size(`listConnections -type animCurve $softDynCurves[$i]`))
		delete `listConnections -type animCurve $softDynCurves[$i]`;
	$spans=`getAttr ($softDynCurves[$i]+".spans")`;
	$degrees=`getAttr ($softDynCurves[$i]+".degree")`;
	$numCv=$spans+$degrees;
	for ($y=0;$y<$numCv;$y++)
		setAttr ($softDynCurves[$i]+".cv["+$y+"]") 0 0 0;
	}
}

global proc asJointsVisibilityToggle ()
{
int $vis;
int $firstModelEditor=0;
string $editors[]=`lsUI -editors`;
for ($i=0;$i<size($editors);$i++)
    if (`modelEditor -q -ex $editors[$i]`)
        {
        if (!$firstModelEditor)
            $vis=!(`modelEditor -q -joints $editors[$i]`);
        $firstModelEditor=1;
        modelEditor -e -joints $vis $editors[$i];
        }
}

global proc asControlsVisibilityToggle ()
{
int $vis;
string $motionSystems[]=`ls -r 1 MotionSystem FaceMotionSystem`;
for ($i=0;$i<size($motionSystems);$i++)
    {
    if ($i==0)
        $vis=!(`getAttr ($motionSystems[$i]+".v")`);
    setAttr ($motionSystems[$i]+".v") $vis;
    }
}

global proc asSetupControlVisibilityHotKeyDialog ()
{
if (`confirmDialog -title "Confirm"
	-message ("Add toggle of control-visibility to the \"~\" hotkey.\n"
	+"For easy toggling visibility of controls.\n"
	+"Holding down the \"~\" key (next to the \"number 1\" on the keyboard) to see and select controls.\n"
	+"As you let go, controls will again be hidden.\n"
	+"The idea is to work without the `visual clutter` of the controls.\n"
	+"Tip: Ctrl+\"\~\" will leave the controls visible")
	-button "Confirm" -button "Cancel" -defaultButton "Confirm"
	-cancelButton "Cancel" -dismissString "Cancel"`!="Confirm")
	return;
asSetupControlVisibilityHotKey;
}

global proc asSetupControlVisibilityHotKey ()
{
if (`runTimeCommand -q -ex advancedSkeletonVisibilitySwitch`)
	return;
nameCommand -ann "advancedSkeletonVisibilitySwitch" -c "advancedSkeletonVisibilitySwitch" advancedSkeletonVisibilitySwitchNameCommand;
runTimeCommand -annotation "switches the visibility of controls" -category "User"
	-command ("int $vis;\nstring $motionSystems[]=`ls -r 1 MotionSystem FaceMotionSystem`;\nfor ($i=0;$i<size($motionSystems);$i++)\n    {\n    if ($i==0)\n        $vis=!(`getAttr ($motionSystems[$i]+\".v\")`);\n    setAttr ($motionSystems[$i]+\".v\") $vis;\n    }")
	advancedSkeletonVisibilitySwitch;
hotkey -keyShortcut "`" -name "advancedSkeletonVisibilitySwitchNameCommand" -releaseName "advancedSkeletonVisibilitySwitchNameCommand";
hotkey -keyShortcut "`" -ctrlModifier -name "advancedSkeletonVisibilitySwitchNameCommand";
}

global proc asVisualizeGimbalLock (string $uiName)
{
string $sel[]=`ls -sl`;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
int $fromSelection;
int $buildGimbal[];
float $scale;
float $bb[];
string $name,$lookForVisConnectionOnObject;
string $tempString[];
string $controlSets[]=`asGetControlSetsFromUI $uiName`;
string $controls[]=`sets -q $controlSets`;

if (`objExists GimbalLockVisualizers`)
	{
	delete GimbalLockVisualizers;
	return;
	}
createNode -n GimbalLockVisualizers transform;
if ($sel[0]!="")
	if (`stringArrayCount $sel[0] $controls`)
		$fromSelection=1;
for ($i=0;$i<size($controls);$i++)
	{
	if ($controls[$i]==$nameSpace+"Main")
		continue;
	$tempString=`listRelatives -s $controls[$i]`;
	if ($tempString[0]!="")
		if (`objectType $tempString[0]`=="nurbsCurve")
			{
			if ($fromSelection)
				if (`stringArrayCount $controls[$i] $sel`)
					$buildGimbal[$i]=1;
			if (!$fromSelection)
				$buildGimbal[$i]=1;
			}
	}
for ($i=0;$i<size($controls);$i++)
	{
	if (!$buildGimbal[$i])
		continue;
	$name=$controls[$i];
	createNode -n ($name+"Constraint") -p GimbalLockVisualizers transform;
	createNode -n ($name+"Offset") -p ($name+"Constraint") transform;

	polyCylinder -n ($name+"Cones") -r 0.3 -h 2.5 -sx 10 -sy 2 -sz 1 -ax 0 1 0 -rcp 0 -cuv 3 -ch 0;
	scale -r -p 0 0 0 0 0 0 ($name+"Cones.vtx[10:19]");
	parent ($name+"Cones") ($name+"Offset");
	if (`objExists asGreenSG`)
		sets -e -forceElement asGreenSG ($name+"Cones");

	polyTorus -n ($name+"Torus") -r 1 -sr 0.03 -tw 0 -sx 30 -sy 6 -ax 0 1 0 -cuv 1 -ch 0;
	parent ($name+"Torus") ($name+"Offset");
	if (`objExists asRedSG`)
		sets -e -forceElement asRedSG ($name+"Torus");

	polyCylinder -n ($name+"Arrow") -r 0.06 -h 2 -sx 10 -sy 3 -sz 1 -ax 0 1 0 -rcp 0 -cuv 3 -ch 0;
	rotate -r 0 0 90 ($name+"Arrow.vtx[0:41]");
	move -r 1 0 0 ($name+"Arrow.vtx[0:41]");
	scale -r -p 0 0 0 1 0 0 ($name+"Arrow.vtx[0:9]") ($name+"Arrow.vtx[40]");
	move -r 0.35 0 0 ($name+"Arrow.vtx[10:19]");
	scale -r -p 0 0 0 1 1.75 1.75 ($name+"Arrow.vtx[10:19]");
	move -r 1 0 0 ($name+"Arrow.vtx[20:29]");
	parent ($name+"Arrow") ($name+"Offset");
	if (`objExists asGreen2SG`)
		sets -e -forceElement asGreen2SG ($name+"Arrow");
	orientConstraint $name ($name+"Arrow");

	$tempString=`listRelatives -p $name`;
	parentConstraint $tempString[0] ($name+"Constraint");
	$tempString=`listRelatives -s $name`;
	$bb=`xform -q -bb ($tempString[0]+".cv[0:999]")`;
	$scale=(($bb[3]-$bb[0])+($bb[4]-$bb[1])+($bb[5]-$bb[2]))/5.0;
	setAttr -type float3 ($name+"Offset.s") $scale $scale $scale;
	$lookForVisConnectionOnObject=$name;
	$tempString=`listConnections -p 1 ($lookForVisConnectionOnObject+".v")`;
	for ($y=0;$y<20;$y++)
		{
		if ($tempString[0]!="")
			{
			connectAttr $tempString[0] ($name+"Offset.v");
			break;
			}
		$tempString=`listRelatives -p $lookForVisConnectionOnObject`;
		if ($tempString[0]=="")
			break;
		$lookForVisConnectionOnObject=$tempString[0];
		$tempString=`listConnections -p 1 ($lookForVisConnectionOnObject+".v")`;
		}
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 0 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 1 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 2 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 3 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 4 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 5 -cd ($name+".rotateOrder") ($name+"Cones.rx");

	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 0 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 1 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 2 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 3 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 4 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 5 -cd ($name+".rotateOrder") ($name+"Cones.rz");

	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 0 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 1 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 2 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 3 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 4 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 5 -cd ($name+".rotateOrder") ($name+"Torus.rx");

	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 0 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 1 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 2 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 3 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 4 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 5 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	}
select $sel;
}

global proc string asSelectorScriptLocation ()
{
string $whatIs=`whatIs asSelectorScriptLocation`;
string $fullPath=`substring $whatIs 25 999`;
string $buffer[];
int $numTok=`tokenize $fullPath "/" $buffer`;
if ($numTok<2)
	if (`about -win`)
		$numTok=`tokenize $fullPath "\\" $buffer`;
int $numLetters=size($fullPath);
int $numLettersLastFolder=size($buffer[$numTok-1]);
string $scriptLocation=`substring $fullPath 1 ($numLetters-$numLettersLastFolder)`;
return $scriptLocation;
}
//-- ASTools Procedures Ends Here --//
